// ----------------------- memory_ports.ice -----------
// @sylefeb - Silice standard library
// Memory port interfaces
// 2020-09-03

// single port BRAM

interface bram_port {
  output! addr,
  output! wenable,
  input   rdata,
  output! wdata,
}

// single port BROM

interface brom_port {
  output! addr,
  input   rdata,
}

// dual port BRAM

interface dualport_bram_port0 {
  output! addr0,
  output! wenable0,
  input   rdata0,
  output! wdata0,
}

interface dualport_bram_port1 {
  output! addr1,
  output! wenable1,
  input   rdata1,
  output! wdata1,
}

interface dualport_bram_ports {
  output! addr0,
  output! wenable0,
  input   rdata0,
  output! wdata0,
  output! addr1,
  output! wenable1,
  input   rdata1,
  output! wdata1,
}

// simple dual port BRAM

interface simple_dualport_bram_port0 {
  output! addr0,
  input   rdata0,
}

interface simple_dualport_bram_port1 {
  output! addr1,
  output! wenable1,
  output! wdata1,
}

// ----------------------- end of memory_ports.ice ----

// SL 2020-04-24
// Wolf3D!
//
// References:
// "Wolfenstein 3D black book" by Fabien Sanglard
// https://github.com/id-Software/wolf3d/blob/master/WOLFSRC/WL_DR_A.ASM
//
//      GNU AFFERO GENERAL PUBLIC LICENSE
//        Version 3, 19 November 2007
//      
//  A copy of the license full text is included in 
//  the distribution, please refer to it for details.

// get pallette in pre-processor
// the palette has 64 entries, create a second darker one
// in the next 64 entries

// SL 2019-10

// Options
// -- 
// -- mode_640_480
//




// ------------------------- 

  // SDRAM simulator
  append('mt48lc16m16a2.v')
  import('simul_sdram.v')

// VGA driver
// SL 2019-10
//
//      GNU AFFERO GENERAL PUBLIC LICENSE
//        Version 3, 19 November 2007
//      
//  A copy of the license full text is included in 
//  the distribution, please refer to it for details.

algorithm vga(
  output uint1  vga_hs,
  output uint1  vga_vs,
  output uint1  active,
  output uint1  vblank,
  output uint10 vga_x,
  output uint10 vga_y
) <autorun> {

// we use the pre-processor to compute some bounds
//
//
//
//

  uint10 xcount(0);
  uint10 ycount(0);

  uint10 pix_x     <:: (xcount - 160);
  uint10 pix_y     <:: (ycount - 45);

  uint1  active_h  <:: (xcount >= 160 && xcount < 800);
  uint1  active_v  <:: (ycount >= 45 && ycount < 525);

  active           :=  active_h && active_v;

  vga_hs           :=  ~((xcount >= 16 && xcount < 112));
  vga_vs           :=  ~((ycount >= 10 && ycount < 12));

  vblank           :=  (ycount < 45);

  always {

    vga_x = active_h ? pix_x : 0;
    vga_y = active_v ? pix_y : 0;

    if (xcount == 799) {
      xcount = 0;
      if (ycount == 524) {
        ycount = 0;
      } else {
        ycount = ycount + 1;
	    }
    } else {
      xcount = xcount + 1;
	  }
  }

}

// -------------------------



// Reset
// SL 2020-10-25

algorithm clean_reset(  
  output uint1 out(1)
) <autorun> {
  uint4  trigger = 15;
  always {
    out     = trigger[0,1];
    trigger = trigger >> 1;
  }
}


// ------------------------- 

// PLL for simulation
/*
NOTE: sdram_clock cannot use a normal output as this would mean sampling
      a register tracking clock using clock itself; this lead to a race
	  condition, see https://stackoverflow.com/questions/58563770/unexpected-simulation-behavior-in-iverilog-on-flip-flop-replicating-clock-signal	  
*/
algorithm pll(
  output  uint1 video_clock,
  output! uint1 sdram_clock,
  output  uint1 compute_clock
) <autorun> {
  uint3 counter = 0;
  uint8 trigger = 8b11111111;
  
  sdram_clock   := clock;
  
  compute_clock := ~counter[0,1]; // x2 slower

  video_clock   := counter[1,1]; // x4 slower
  
  while (1) {	  
    counter = counter + 1;
	  trigger = trigger >> 1;
  }
}

// ------------------------- 

// TODO add back Mojov3




// ------------------------- 

// SDRAM controller
// -----------------------------------------------------------
// @sylefeb A SDRAM controller in Silice
//
// SDRAM interface definitions
//

// -----------------------------------------------------------

// SDRAM, r128w8 data exchange (1 byte write, 16 bytes burst read)
group sdram_r128w8_io
{
  uint26  addr       = 0,  // addressable bytes (internally deals with 16 bits wide sdram)
  uint1   rw         = 0,  // 0: read 1: write
  uint8   data_in    = 0,  //   8 bits write
  uint8   wmask      = 0,  // ignored
  uint1   in_valid   = 0,  // pulse high to request a read/write
  uint128 data_out   = uninitialized,  // 128 bits read (8x burst of 16 bits)
  uint1   done       = 0   // pulses high when done, both for reads and writes
}

// SDRAM, r16w16 data exchange (2 bytes write, 2 bytes read)
group sdram_r16w16_io
{
  uint26  addr       = 0,  // addressable bytes (internally deals with 16 bits wide sdram)
  uint1   rw         = 0,  // 0: read 1: write
  uint16  data_in    = 0,  // 
  uint8   wmask      = 0,  // ignored
  uint1   in_valid   = 0,  // pulse high to request a read/write
  uint16  data_out   = uninitialized,  // 
  uint1   done       = 0   // pulses high when done, both for reads and writes
}

// SDRAM, r512w64 data exchange (8 bytes burst write, 64 bytes burst read)
group sdram_r512w64_io
{
  uint26  addr       = uninitialized,  // addressable bytes (internally deals with 16 bits wide sdram)
  uint1   rw         = uninitialized,  // 0: read 1: write
  uint64  data_in    = uninitialized,  //
  uint8   wmask      = 255,// write mask: 1 write byte, 0 skip byte
  uint1   in_valid   = 0,  // pulse high to request a read/write
  uint512 data_out   = uninitialized,  //
  uint1   done       = 0   // pulses high when done, both for reads and writes
}

// SDRAM, byte data exchange

group sdram_byte_io
{
  uint26  addr       = 0,
  uint1   rw         = 0,
  uint8   data_in    = 0,
  uint8   wmask      = 0,  // ignored
  uint1   in_valid   = 0,
  uint8   data_out   = uninitialized,
  uint1   done       = 0
}

// => NOTE how sdram_raw_io and sdram_byte_io are compatible in terms of named members
//         this allows using the same interface for both

// Interfaces

// interface for user
interface sdram_user {
  output  addr,
  output  rw,
  output  data_in,
  output  in_valid,
  output  wmask,
  input   data_out,
  input   done,
}

// interface for provider
interface sdram_provider {
  input   addr,
  input   rw,
  input   data_in,
  input   in_valid,
  input   wmask,
  output  data_out,
  output  done
}

// -----------------------------------------------------------

// -----------------------------------------------------------
// @sylefeb A SDRAM controller in Silice
//
// SDRAM controller with auto-precharge
// - expects a 16 bits wide SDRAM interface
// - writes single bytes
// - reads bursts of 8 x 16 bits
//
// if using directly the controller: 
//  - reads (16x8 bits) have to align with 128 bits boundaries (16 bytes)
//  - writes   (8 bits) do not have this restriction
//
// use the sdram_byte_readcache for a simple byte interface

// AS4C32M16SB (e.g. some ULX3S)
// 4 banks, 8192 rows, 1024 columns, 16 bits words
// ============== addr ================================
//   25 24 | 23 -------- 11 | 10 ----- 1 | 0
//   bank  |     row        |   column   | byte (H/L)
// ====================================================

// IS42S16160G (e.g. some ULX3S)
// 4 banks, 8192 rows,  512 columns, 16 bits words
// ============== addr ================================
//   25 24 | 22 -------- 10 |  9 ----- 1 | 0
//   bank  |     row        |   column   | byte (H/L)
// ====================================================

// AS4C16M16SA (.e.g some MiSTer SDRAM)
// 4 banks, 8192 rows,  512 columns, 16 bits words
// ============== addr ================================
//   25 24 | 22 -------- 10 |  9 ----- 1 | 0
//   bank  |     row        |   column   | byte (H/L)
// ====================================================

//      GNU AFFERO GENERAL PUBLIC LICENSE
//        Version 3, 19 November 2007
//      
//  A copy of the license full text is included in 
//  the distribution, please refer to it for details.


import('inout16_set.v')


// -----------------------------------------------------------

circuitry command(
  output sdram_cs,output sdram_ras,output sdram_cas,output sdram_we,input cmd)
{
  sdram_cs  = cmd[3,1];
  sdram_ras = cmd[2,1];
  sdram_cas = cmd[1,1];
  sdram_we  = cmd[0,1];
}

// -----------------------------------------------------------


algorithm sdram_controller_autoprecharge_r128_w8(
        // sdram pins
        // => we use immediate (combinational) outputs as these are registered 
        //    explicitely using dedicqted primitives when available / implemented
        output! uint1   sdram_cle,
        output! uint1   sdram_cs,
        output! uint1   sdram_cas,
        output! uint1   sdram_ras,
        output! uint1   sdram_we,
        output! uint2   sdram_dqm,
        output! uint2   sdram_ba,
        output! uint13  sdram_a,
        // data bus
        inout   uint16  sdram_dq,
        // interface
        sdram_provider sd,
        output uint1 error,
) <autorun>
{

  // SDRAM commands
  uint4 CMD_UNSELECTED    = 4b1000;
  uint4 CMD_NOP           = 4b0111;
  uint4 CMD_ACTIVE        = 4b0011;
  uint4 CMD_READ          = 4b0101;
  uint4 CMD_WRITE         = 4b0100;
  uint4 CMD_TERMINATE     = 4b0110;
  uint4 CMD_PRECHARGE     = 4b0010;
  uint4 CMD_REFRESH       = 4b0001;
  uint4 CMD_LOAD_MODE_REG = 4b0000;

  uint1   reg_sdram_cs  = uninitialized;
  uint1   reg_sdram_cas = uninitialized;
  uint1   reg_sdram_ras = uninitialized;
  uint1   reg_sdram_we  = uninitialized;
  uint2   reg_sdram_dqm = uninitialized;
  uint2   reg_sdram_ba  = uninitialized;
  uint13  reg_sdram_a   = uninitialized;
  uint16  reg_dq_o      = 0;
  uint1   reg_dq_en     = 0;


  uint16 dq_i      = 0;


  inout16_set ioset(
    clock           <:  clock,
    io_pin          <:> sdram_dq,
    io_write        <:  reg_dq_o,
    io_read         :>  dq_i,
    io_write_enable <:  reg_dq_en
  );


  uint4  cmd = 7;
  
  uint1  work_todo   = 0;
  uint13 row         = 0;
  uint2  bank        = 0;
  uint10 col         = 0;
  uint8  data        = 0;
  uint1  do_rw       = 0;
  uint1  byte        = 0;


  int11 refresh_count = -1;
  
  // waits for incount + 4 cycles
  subroutine wait(input uint16 incount)
  {
    uint16 count = uninitialized;
    count = incount;
    while (count != 0) {
      count = count - 1;      
    }
  }
  
  error := 0;

  sdram_cle := 1;
  sdram_cs  := reg_sdram_cs;
  sdram_cas := reg_sdram_cas;
  sdram_ras := reg_sdram_ras;
  sdram_we  := reg_sdram_we;
  sdram_dqm := reg_sdram_dqm;
  sdram_ba  := reg_sdram_ba;
  sdram_a   := reg_sdram_a;

  sd.done := 0;
  
  always { // always block tracks in_valid
  
    cmd = CMD_NOP;
    (reg_sdram_cs,reg_sdram_ras,reg_sdram_cas,reg_sdram_we) = command(cmd);
    if (sd.in_valid) {
      // -> copy inputs
      bank      = sd.addr[24, 2]; // bits 24-25
      row       = sd.addr[11, 13];
      col       = sd.addr[                      1, 10];
      byte      = sd.addr[ 0, 1];
      data      = sd.data_in;
      do_rw     = sd.rw;    
      // -> signal work to do
      work_todo = 1;
    }
  }

  // wait after powerup
  reg_sdram_a  = 0;
  reg_sdram_ba = 0;
  reg_dq_en    = 0;
  () <- wait <- (65535); // ~0.5 msec at 100MHz

  // precharge all
  cmd      = CMD_PRECHARGE;
  (reg_sdram_cs,reg_sdram_ras,reg_sdram_cas,reg_sdram_we) = command(cmd);  
  reg_sdram_a  = {2b0,1b1,10b0};
  () <- wait <- (0);

  // load mod reg
  cmd      = CMD_LOAD_MODE_REG;
  (reg_sdram_cs,reg_sdram_ras,reg_sdram_cas,reg_sdram_we) = command(cmd);  
  reg_sdram_ba = 0;
  reg_sdram_a  = {3b000, 1b1, 2b00, 3b011/*CAS*/, 1b0, 3b011 };
++:
  
  // init done, start answering requests  
  while (1) {

    // refresh?
    if (refresh_count[10,1] == 1) { // became negative!

      // refresh
      cmd           = CMD_REFRESH;
      (reg_sdram_cs,reg_sdram_ras,reg_sdram_cas,reg_sdram_we) = command(cmd);
      // wait
      () <- wait <- (3);
      // -> reset count
      refresh_count = 750;  

    } else {

      refresh_count = refresh_count - 1;

      if (work_todo) {
        work_todo = 0;
        
        // -> activate
        reg_sdram_ba = bank;
        reg_sdram_a  = row;
        cmd          = CMD_ACTIVE;
        (reg_sdram_cs,reg_sdram_ras,reg_sdram_cas,reg_sdram_we) = command(cmd);
++:
++:
        
        // write or read?
        if (do_rw) {
          // __display("<sdram: write %x>",data);
          // write
          cmd           = CMD_WRITE;
          (reg_sdram_cs,reg_sdram_ras,reg_sdram_cas,reg_sdram_we) = command(cmd);
          reg_dq_en     = 1;
          reg_sdram_a   = {2b0, 1b1/*auto-precharge*/, col};
          reg_dq_o      = {data,data};
          reg_sdram_dqm = {~byte,byte};
          // signal done
          sd.done       = 1;
++:       // wait one cycle to enforce tWR
        } else {
          // read
          cmd             = CMD_READ;
          (reg_sdram_cs,reg_sdram_ras,reg_sdram_cas,reg_sdram_we) = command(cmd);
          reg_dq_en       = 0;
          reg_sdram_dqm   = 2b0;
          reg_sdram_a     = {2b0, 1b1/*auto-precharge*/, col};
          // wait CAS cycles
++:
++:
++:
++:
          // burst 8 x 16 bytes
          {
            uint8 read_cnt = 0;
            while (read_cnt < 8) {
              sd.data_out[{read_cnt,4b0000},16] = dq_i;
              read_cnt     = read_cnt + 1;
              sd.done      = (read_cnt[3,1]); // data_out is available
            }
          }
        }
        
++: // enforce tRP
++:
++:

      } // work_todo
    } // refresh

  }
}

// -----------------------------------------------------------

// include('sdram_controller_r128_w8.ice')
// -----------------------------------------------------------
// @sylefeb A SDRAM controller in Silice
//
// SDRAM arbitrer

// ------------------------- 
// N-way arbitrer for SDRAM
// sd0 has highest priority, then sd1, then ...


algorithm sdram_arbitrer_4way(
  sdram_provider sd0,
  sdram_provider sd1,
  sdram_provider sd2,
  sdram_provider sd3,
  sdram_user     sd
) {

  sameas(sd0) buffered_sd0;
  sameas(sd1) buffered_sd1;
  sameas(sd2) buffered_sd2;
  sameas(sd3) buffered_sd3;
  
  uint4 working   = 0;
  uint4 in_valids = uninitialized;

  sd0.done      := 0; // pulses high when ready
  sd1.done      := 0; // pulses high when ready
  sd2.done      := 0; // pulses high when ready
  sd3.done      := 0; // pulses high when ready
  sd .in_valid    := 0; // pulses high when ready
  
  always {
    
    in_valids = {
        buffered_sd3.in_valid
        && !buffered_sd2.in_valid
        && !buffered_sd1.in_valid
        && !buffered_sd0.in_valid
       ,
        buffered_sd2.in_valid
        && !buffered_sd1.in_valid
        && !buffered_sd0.in_valid
       ,
        buffered_sd1.in_valid
        && !buffered_sd0.in_valid
       ,
        buffered_sd0.in_valid
    };

    // buffer requests
    if (sd0.in_valid == 1) {
      buffered_sd0.addr       = sd0.addr;
      buffered_sd0.rw         = sd0.rw;
      buffered_sd0.data_in    = sd0.data_in;
      buffered_sd0.wmask      = sd0.wmask;
      buffered_sd0.in_valid   = 1;
    }
    if (sd1.in_valid == 1) {
      buffered_sd1.addr       = sd1.addr;
      buffered_sd1.rw         = sd1.rw;
      buffered_sd1.data_in    = sd1.data_in;
      buffered_sd1.wmask      = sd1.wmask;
      buffered_sd1.in_valid   = 1;
    }
    if (sd2.in_valid == 1) {
      buffered_sd2.addr       = sd2.addr;
      buffered_sd2.rw         = sd2.rw;
      buffered_sd2.data_in    = sd2.data_in;
      buffered_sd2.wmask      = sd2.wmask;
      buffered_sd2.in_valid   = 1;
    }
    if (sd3.in_valid == 1) {
      buffered_sd3.addr       = sd3.addr;
      buffered_sd3.rw         = sd3.rw;
      buffered_sd3.data_in    = sd3.data_in;
      buffered_sd3.wmask      = sd3.wmask;
      buffered_sd3.in_valid   = 1;
    }
    // check if operations terminated
    switch (working) {
      case 1 : { 
        if (sd.done == 1) {
          // done
          sd0.data_out          = sd.rw ? sd0.data_out : sd.data_out; // update data on read
          sd0.done              = 1;
          working                 = 0;
          buffered_sd0.in_valid = 0;
        }
      }
      case 2 : { 
        if (sd.done == 1) {
          // done
          sd1.data_out          = sd.rw ? sd1.data_out : sd.data_out; // update data on read
          sd1.done              = 1;
          working                 = 0;
          buffered_sd1.in_valid = 0;
        }
      }
      case 4 : { 
        if (sd.done == 1) {
          // done
          sd2.data_out          = sd.rw ? sd2.data_out : sd.data_out; // update data on read
          sd2.done              = 1;
          working                 = 0;
          buffered_sd2.in_valid = 0;
        }
      }
      case 8 : { 
        if (sd.done == 1) {
          // done
          sd3.data_out          = sd.rw ? sd3.data_out : sd.data_out; // update data on read
          sd3.done              = 1;
          working                 = 0;
          buffered_sd3.in_valid = 0;
        }
      }
      default: { 
            switch (in_valids) {
              case 1: {
                sd.addr     = buffered_sd0.addr;
                sd.rw       = buffered_sd0.rw;
                sd.data_in  = buffered_sd0.data_in;
                sd.wmask    = buffered_sd0.wmask;
                sd.in_valid = 1;
                working     = 1; // wait for done
              }            
              case 2: {
                sd.addr     = buffered_sd1.addr;
                sd.rw       = buffered_sd1.rw;
                sd.data_in  = buffered_sd1.data_in;
                sd.wmask    = buffered_sd1.wmask;
                sd.in_valid = 1;
                working     = 2; // wait for done
              }            
              case 4: {
                sd.addr     = buffered_sd2.addr;
                sd.rw       = buffered_sd2.rw;
                sd.data_in  = buffered_sd2.data_in;
                sd.wmask    = buffered_sd2.wmask;
                sd.in_valid = 1;
                working     = 4; // wait for done
              }            
              case 8: {
                sd.addr     = buffered_sd3.addr;
                sd.rw       = buffered_sd3.rw;
                sd.data_in  = buffered_sd3.data_in;
                sd.wmask    = buffered_sd3.wmask;
                sd.in_valid = 1;
                working     = 8; // wait for done
              }            
              default: { }
            }
        }
    } // switch
  } // always
}

// -----------------------------------------------------------

// -----------------------------------------------------------
// @sylefeb A SDRAM controller in Silice
//
// SDRAM utilities
// - [sdram_half_speed_access] half speed bridge accross clock domains
// - [sdram_byte_readcache]    implements a byte read/write interface, caching the larger read access
// -----------------------------------------------------------

// wrapper for sdram from design running half-speed clock
// the wrapper runs full speed, the provided interface at half-speed
algorithm sdram_half_speed_access(
  sdram_provider sdh,
  sdram_user     sd,
) <autorun> {

  uint1 half_clock(0);
  uint2 done(0);

  uint32 cycle(0);

  sdh.done     := 0; // pulses high when ready
  sd .in_valid := 0; // pulses high when ready
    
  always {
    // buffer requests
    if (half_clock) { // read only on slow clock
      if (sdh.in_valid == 1) {
        // relay request
        sd.addr       = sdh.addr;
        sd.rw         = sdh.rw;
        sd.data_in    = sdh.data_in;
        sd.wmask      = sdh.wmask;
        sd.in_valid   = 1;
      }
    }
    // update 2-cycle 'done'
    done = done >> 1;
    // check if operation terminated
    if (sd.done == 1) {
      // done
      done         = 2b11;
      sdh.data_out = sd.rw ? sdh.data_out : sd.data_out; // update data_out on a read
    }
    // two-cycle out done
    sdh.done      = done[0,1];
    // half clock
    half_clock    = ~ half_clock;
    
    cycle = cycle  + 1;
  } // always

}

// -----------------------------------------------------------

// implements a simplified byte memory interface
algorithm sdram_byte_readcache(
  sdram_provider sdb,
  sdram_user     sdr,
) <autorun> {

  // cached reads
  sameas(sdr.data_out) cached = uninitialized;
  uint26  cached_addr         = 26h3FFFFFF;
  
  always {

    if (sdb.in_valid) {
      if (sdb.rw == 0) { // reading
        if (sdb.addr[4,22] == cached_addr[4,22]) {
          // in cache!
          sdb.data_out  = cached >> {sdb.addr[0,4],3b000};
          // no request
          sdr.in_valid  = 0;
          // done
          sdb.done      = 1;
        } else {
          // record addr to cache
          cached_addr   = sdb.addr;
          // issue read
          sdr.rw        = 0;
          sdr.addr      = {cached_addr[4,22],4b0000};
          sdr.in_valid  = 1;
          // not done
          sdb.done      = 0;
        }
      } else { // writing
        // issue write
        sdr.rw        = 1;
        sdr.addr      = sdb.addr;
        sdr.data_in   = sdb.data_in;
        sdr.in_valid  = 1; 
        // not done
        sdb.done      = 0;
        // invalidate cache
        if (sdb.addr[4,22] == cached_addr[4,22]) {
          cached_addr = 26h3FFFFFF;
        }
      }
    } else {
      if (sdr.done) {
        // sdram is done
        if (sdr.rw == 0) {
          // -> fill cache
          cached        = sdr.data_out;
          // -> extract byte
          sdb.data_out  = cached >> {cached_addr[0,4],3b000};
        }
        // no request
        sdr.in_valid = 0;
        // done
        sdb.done     = 1;
      } else {
        // no request
        sdr.in_valid  = 0;
        // not done
        sdb.done      = 0;
      }
    }

  }

}

// -----------------------------------------------------------


// ------------------------- 

// video sdram framework
// SL 2019-10
//
//      GNU AFFERO GENERAL PUBLIC LICENSE
//        Version 3, 19 November 2007
//      
//  A copy of the license full text is included in 
//  the distribution, please refer to it for details.

// ------------------------- 

// 320x200 or 640x480
//
// Actual resolution is   640x480
// we divide by 2 down to 320x240
// we draw rows 1 to 200 (as opposed to 0 to 199)
// the first row (0) is used to pre-load row 1
// 
algorithm frame_display(
  input   uint11   video_x,
  input   uint10   video_y,
  input   uint1    video_active,
  output! uint8    video_r,
  output! uint8    video_g,
  output! uint8    video_b,
  output! uint10   pixaddr0,
  input   uint128 pixdata0_r,
  output! uint10   pixaddr1,
  input   uint128 pixdata1_r,
  simple_dualport_bram_port0 palette,
  output! uint1    row_busy
) <autorun> {

  uint8  palidx = 0;
  uint9  pix_j  = 0;
  uint2  sub_j  = 0;
  uint10 pix_a  = 0;
  uint24 color  = 0;

  uint10 sub_a <: {((video_x+1d1)>>1) & 4d15,3b000};


  // default pixel color to zero
  // (black unless overriden during clock cycle)
  video_r := 0;
  video_g := 0;
  video_b := 0;

  // ---------- show time!

  row_busy = 1; // initally reading from row 1

  while (1) {
    
    pixaddr0 = 0;
    pixaddr1 = 0;
  
    if (video_active) {
    
      // display
	    // -> screen row 0 is skipped as we preload row 0, we draw rows 1-200
	    //    the row loader loads row   0 for display in screen row   1
	    //    ...            loads row 199 for display in screen row 200
      if (pix_j != 0 && pix_j != 201) { // 201 so that we get 200 rows indeed
        // set palette address
        if (row_busy) {
          palette.addr0 = pixdata1_r[sub_a,8];
        } else {
          palette.addr0 = pixdata0_r[sub_a,8];
        }
        // read color from previous
        color    = palette.rdata0;
        video_r  = color[ 0,8] >> 2;
        video_g  = color[ 8,8] >> 2;
        video_b  = color[16,8] >> 2;
      }
      if (video_x == 639) { // end of row
        // increment pix_j
        sub_j = sub_j + 1;
        if (sub_j == 2) {
          sub_j = 0;
          pix_j = (pix_j == 201) ? 201 : pix_j + 1;
        }		
        if (video_y == 479) {
          // end of frame
          sub_j = 0;
          pix_j = 0;          
        }
      }      
      row_busy = ~(pix_j[0,1]);

      // prepare next read
      pix_a = (video_x != 638 && video_x != 639) ? ((video_x+2) >> 1) : 0;
      // __display("x %d, pix_a %d",video_x,pix_a);
      pixaddr0 = pix_a>>4;
      pixaddr1 = pix_a>>4;

    }

  }

}

// ------------------------- 

algorithm frame_buffer_row_updater(
  sdram_user       sd,
  output! uint10   pixaddr0,
  output! uint128 pixdata0_w,
  output! uint1    pixwenable0,
  output! uint10   pixaddr1,
  output! uint128 pixdata1_w,
  output! uint1    pixwenable1,
  input   uint1    row_busy,
  input   uint1    vsync,
  output  uint1    working,
  input   uint1    fbuffer
) <autorun> {
  // frame update counters
  uint9  count             = 0;
  uint9  row               = 0; // 0 .. 200 (0 loads 1, but 0 is not displayed, we display 1 - 200)
  uint1  working_row       = 0; // parity of row in which we write
  uint1  row_busy_filtered = 0;
  uint1  vsync_filtered    = 0;
  uint1  fbuffer_filtered  = 0;

  sd.in_valid       := 0; // maintain low (pulses high when needed)
  
  row_busy_filtered ::= row_busy;
  vsync_filtered    ::= vsync;
  fbuffer_filtered  ::= fbuffer;
  
  always {
    // writing/reading on buffers
    if (row_busy_filtered) {
      pixwenable0 = 1; // write 0
      pixwenable1 = 0; // read  1
    } else {
      pixwenable0 = 0; // read  0
      pixwenable1 = 1; // write 1
    }  
  }
  
  working = 0;  // not working  
  sd.rw   = 0;  // read

  while(1) {

    // not working for now
    working = 0;

    // wait during vsync or while the busy row is the working row
    while (vsync_filtered || (working_row == row_busy_filtered)) { 
		  if (vsync_filtered) { // vsync implies restarting the row counter
			  row         = 0;
			  working_row = 0;
		  }
	  }

    // working again!
	  working = 1;
    // working_row (in which we write) is now != busy_row (which is read for display)

    // read row from SDRAM into frame row buffer
    //    
    // NOTE: here we assume this can be done fast enough such that row_busy
    //       will not change mid-course ... will this be true? 
    //       in any case the display cannot wait, so apart from error
    //       detection there is no need for a sync mechanism    
    count = 0;
    while (count < 20) { // we read 16/64 bytes at once

      // address to read from (count + row * 320)
      sd.addr      = {1b0,fbuffer_filtered,24b0} | (count<<4) | (row << 9); 
      sd.in_valid  = 1;             // go ahead!      
      while (sd.done == 0) { }      // wait for value
      // __display("<read %x>",sd.data_out);
      pixdata0_w   = sd.data_out;   // data to write
      pixaddr0     = count;         // address to write
      pixdata1_w   = sd.data_out;   // data to write
      pixaddr1     = count;         // address to write        
      // next
      count        = count + 1;

    }

    // change working row
    working_row = ~working_row;
	  if (row != 199) {
      row = row + 1;
	  } else {    
      row = 0;
    }
  }

}

// ------------------------- 


// ------------------------- 


// ------------------------- 

algorithm main(
  output uint8 leds,
  output uint1 video_clock,
  // VGA
  output uint6 video_r,
  output uint6 video_g,
  output uint6 video_b,
  output uint1 video_hs,
  output uint1 video_vs,
) <@sdram_clock,!sdram_reset> {

  uint1 video_reset   = 0;
  uint1 sdram_reset   = 0;
  uint1 compute_reset = 0;

  // --- PLL
  uint1 compute_clock = 0;
  uint1 sdram_clock   = 0;
  pll clockgen<@clock,!reset>(
    video_clock   :> video_clock,
    sdram_clock   :> sdram_clock,
    compute_clock :> compute_clock
  );

  // --- video clean reset
  clean_reset video_rstcond<@video_clock,!reset> (
    out   :> video_reset
  );
  // --- SDRAM clean reset
  clean_reset sdram_rstcond<@sdram_clock,!reset> (
    out   :> sdram_reset
  );
  // --- compute clean reset
  clean_reset compute_rstcond<@compute_clock,!reset> (
    out   :> compute_reset
  );

  uint1  video_active = 0;
  uint1  video_vblank = 0;
  uint11 video_x  = 0;
  uint10 video_y  = 0;

  // --- VGA
  vga vga_driver<@video_clock,!video_reset>(
    vga_hs :> video_hs,
    vga_vs :> video_vs,
    vga_x  :> video_x,
    vga_y  :> video_y,
    vblank :> video_vblank,
    active :> video_active,
  );


// --- SDRAM
  uint1  sdram_cle   = 0;
  uint2  sdram_dqm   = 0;
  uint1  sdram_cs    = 0;
  uint1  sdram_we    = 0;
  uint1  sdram_cas   = 0;
  uint1  sdram_ras   = 0;
  uint2  sdram_ba    = 0;
  uint13 sdram_a     = 0;
  uint16 sdram_dq    = 0;

  simul_sdram simul<@sdram_clock,!sdram_reset>(
    sdram_clk <: clock,
    <:auto:>
  );

  // --- SDRAM raw interface

  sdram_r128w8_io sdm;
  sdram_controller_autoprecharge_r128_w8  memory<@sdram_clock,!sdram_reset>(
  // sdram_controller_r128_w8 memory<@sdram_clock,!sdram_reset>(
    sd         <:> sdm,
    <:auto:>
  );

  // --- SDRAM byte memory interface

  sameas(sdm) sdf; // framebuffer
  sameas(sdm) sdd; // drawer
  sameas(sdm) sda; // aux
  sameas(sdm) sdi; // init

  // --- SDRAM arbitrer, framebuffer (0) / drawer (1) / init (2)
  sdram_arbitrer_4way sd_switcher<@sdram_clock,!sdram_reset>(
    sd         <:>  sdm,
    sd0        <:>  sdf,
    sd1        <:>  sdd,
    sd2        <:>  sda,
    sd3        <:>  sdi,
  );

  // --- Frame buffer row memory
  // dual clock crosses from sdram to vga
  simple_dualport_bram uint128 fbr0<@video_clock,@sdram_clock>[20] = uninitialized;
  simple_dualport_bram uint128 fbr1<@video_clock,@sdram_clock>[20] = uninitialized;

  // --- Palette
  simple_dualport_bram uint24 palette[] = {
    // palette from pre-processor table
  2294532,
  5243138,
  6422531,
  6161152,
  3147270,
  4195842,
  7012865,
  3671557,
  8650752,
  8126720,
  4719877,
  7602690,
  9240580,
  10092802,
  11337984,
  6951698,
  5051925,
  6558740,
  4200730,
  3087388,
  2958886,
  6235943,
  5254444,
  1520709,
  3487798,
  1719119,
  1915990,
  4145472,
  2179419,
  2244704,
  1917534,
  2114662,
  4672072,
  2443629,
  5263953,
  6973440,
  7500032,
  5922139,
  7171107,
  7960833,
  7040055,
  6579813,
  8553216,
  8158262,
  7303792,
  9211151,
  8356168,
  9671951,
  8159100,
  9671473,
  10329625,
  8619652,
  10131777,
  11053070,
  9343375,
  11645218,
  11447888,
  11579718,
  10067098,
  10593442,
  12434759,
  11382958,
  13421936,
  16580606,
  1114370,
  2621441,
  3211265,
  3080448,
  1573635,
  2097921,
  3473664,
  1835778,
  4325376,
  4063232,
  2359810,
  3801345,
  4587522,
  5046273,
  5636096,
  3475721,
  2493194,
  3279370,
  2100237,
  1510926,
  1446675,
  3085075,
  2627094,
  727586,
  1711131,
  859431,
  925227,
  2039840,
  1056813,
  1122352,
  925999,
  1057331,
  2303268,
  1188918,
  2631976,
  3486720,
  3749888,
  2960941,
  3552785,
  3947520,
  3487259,
  3289906,
  4276480,
  4079131,
  3619128,
  4605447,
  4145188,
  4803079,
  4079422,
  4802840,
  5132044,
  4277058,
  5065760,
  5526535,
  4671559,
  5789713,
  5723944,
  5789731,
  5000781,
  5263953,
  6184483,
  5658711,
  6710840,
  8290175,
  0,
  0,
  0,
  0,
  0,
  25856,
  0,
  0,
  1896939,
  14374418,
  32800,
  0,
  2097152,
  8192,
  32,
  0,
  2097152,
  8192,
  32,
  0,
  2097152,
  8192,
  32,
  0,
  2097152,
  8192,
  112,
  0,
  6356992,
  27648,
  105,
  0,
  6553600,
  30720,
  32,
  0,
  2097152,
  8192,
  32,
  0,
  2097152,
  8192,
  32,
  0,
  3997696,
  8192,
  116,
  0,
  6619136,
  30720,
  116,
  0,
  7667712,
  29184,
  101,
  0,
  3014656,
  29184,
  100,
  0,
  6356992,
  29696,
  97,
  0,
  2097152,
  11008,
  32,
  0,
  3538944,
  13312,
  59,
  0,
  0,
  0,
  0,
  0,
  5636352,
  20615,
  8045654,
  65536,
  10499703,
  12867073,
  80,
  8288964,
  5636352,
  36919,
  7849046,
  65536,
  13663354,
  12867073,
  64,
  3962820,
  5636352,
  36992,
  8045654,
  65536,
  9455223,
  12867073,
  80,
  8223428,
  5636352,
  2592,
  2127209,
  7238706,
  8885716,
  15923274,
  1708048,
  12737988,
  5636352,
  4347,
  8242262,
  65536,
  786432,
  49360,
  14741600,
  5107571,
  2960685,
  2954240,
  0,
  0,
  2104954,
  12867073,
  4,
  61695,
  16777215,
  16723245,
  2960685,
  2960685,
  };  
  
  // --- Display
  uint1 row_busy = 0;
  frame_display display<@video_clock,!video_reset>(
    pixaddr0   :> fbr0.addr0,
    pixdata0_r <: fbr0.rdata0,
    pixaddr1   :> fbr1.addr0,
    pixdata1_r <: fbr1.rdata0,
    row_busy   :> row_busy,
	  video_x    <: video_x,
	  video_y    <: video_y,
    video_r    :> video_r,
    video_g    :> video_g,
    video_b    :> video_b,
    palette   <:> palette,
    <:auto:>
  );

  uint1 onscreen_fbuffer = 0;
  
  // --- Frame buffer row updater
  frame_buffer_row_updater fbrupd<@sdram_clock,!sdram_reset>(
    pixaddr0   :> fbr0.addr1,
    pixdata0_w :> fbr0.wdata1,
    pixwenable0:> fbr0.wenable1,
    pixaddr1   :> fbr1.addr1,
    pixdata1_w :> fbr1.wdata1,
    pixwenable1:> fbr1.wenable1,
    row_busy   <: row_busy,
    vsync      <: video_vblank,
    sd         <:> sdf,
    fbuffer    <: onscreen_fbuffer
  );

  // --- Init from SDCARD
  sameas(sdm) sdh;
  
  sdram_half_speed_access sdaccess<@sdram_clock,!sdram_reset>(
    sd      <:> sdi,
    sdh     <:> sdh,
  );

  uint1 data_ready = 0;
  uint1 frame_drawer_reset <:: compute_reset;

  // --- Frame drawer
  frame_drawer drawer<@compute_clock,!frame_drawer_reset>(
    vsync       <:  video_vblank,
    sd          <:> sdd,
    fbuffer     :>  onscreen_fbuffer,
    sdram_clock <:  sdram_clock,
    sdram_reset <:  sdram_reset,
    <:auto:>
  );

  uint8 frame       = 0;

  always {
    if (sdi.in_valid) {
__display("SDI INVALID %b @%h",sdi.in_valid,sdi.addr);
    }
    if (sdi.done) {
__display("SDI DONE %b",sdi.done);
    }
  }

  // ---------- let's go (all modules autorun)

  // we count a number of frames and stop
  while (frame < 2) {
    while (video_vblank == 1) { }
	  while (video_vblank == 0) { }
    frame = frame + 1;    
  }

}

// ------------------------- 



// Sylvain Lefebvre; simple parallel division; 2019-10-09
// any width version; see divint.ice for more info

// Returns largest positive/negative int on div by zero
//
// == Requires ==
// div_width to be set to the desired bitwidth.
// for div_width = W the algorithm is named divW,
// e.g. div_width = 16 produces algorithm div16
//
// == Options ==
// div_unsigned : unsigned only
// div_shrink   : allows to reduce size at the expense of perf.
//    0 => default, use all stages
//    1 => one stage every two
//    2 => one stage every four
// ...
// at worst the algorithm becomes a loop adding
// den until it exceed num, resulting in worst performance
// but smallest synthesized size



// use pre-processor to generate all comparators
algorithm mul_cmp20_0(
   input   uint20 num,
   input   uint20 den,
   output! uint1 beq)
<autorun>   
{
  uint21 nk = 0;
  always {
    nk  = (num >> 0);
    beq = (nk > den);
  }
}
algorithm mul_cmp20_1(
   input   uint20 num,
   input   uint20 den,
   output! uint1 beq)
<autorun>   
{
  uint21 nk = 0;
  always {
    nk  = (num >> 1);
    beq = (nk > den);
  }
}
algorithm mul_cmp20_2(
   input   uint20 num,
   input   uint20 den,
   output! uint1 beq)
<autorun>   
{
  uint21 nk = 0;
  always {
    nk  = (num >> 2);
    beq = (nk > den);
  }
}
algorithm mul_cmp20_3(
   input   uint20 num,
   input   uint20 den,
   output! uint1 beq)
<autorun>   
{
  uint21 nk = 0;
  always {
    nk  = (num >> 3);
    beq = (nk > den);
  }
}
algorithm mul_cmp20_4(
   input   uint20 num,
   input   uint20 den,
   output! uint1 beq)
<autorun>   
{
  uint21 nk = 0;
  always {
    nk  = (num >> 4);
    beq = (nk > den);
  }
}
algorithm mul_cmp20_5(
   input   uint20 num,
   input   uint20 den,
   output! uint1 beq)
<autorun>   
{
  uint21 nk = 0;
  always {
    nk  = (num >> 5);
    beq = (nk > den);
  }
}
algorithm mul_cmp20_6(
   input   uint20 num,
   input   uint20 den,
   output! uint1 beq)
<autorun>   
{
  uint21 nk = 0;
  always {
    nk  = (num >> 6);
    beq = (nk > den);
  }
}
algorithm mul_cmp20_7(
   input   uint20 num,
   input   uint20 den,
   output! uint1 beq)
<autorun>   
{
  uint21 nk = 0;
  always {
    nk  = (num >> 7);
    beq = (nk > den);
  }
}
algorithm mul_cmp20_8(
   input   uint20 num,
   input   uint20 den,
   output! uint1 beq)
<autorun>   
{
  uint21 nk = 0;
  always {
    nk  = (num >> 8);
    beq = (nk > den);
  }
}
algorithm mul_cmp20_9(
   input   uint20 num,
   input   uint20 den,
   output! uint1 beq)
<autorun>   
{
  uint21 nk = 0;
  always {
    nk  = (num >> 9);
    beq = (nk > den);
  }
}
algorithm mul_cmp20_10(
   input   uint20 num,
   input   uint20 den,
   output! uint1 beq)
<autorun>   
{
  uint21 nk = 0;
  always {
    nk  = (num >> 10);
    beq = (nk > den);
  }
}
algorithm mul_cmp20_11(
   input   uint20 num,
   input   uint20 den,
   output! uint1 beq)
<autorun>   
{
  uint21 nk = 0;
  always {
    nk  = (num >> 11);
    beq = (nk > den);
  }
}
algorithm mul_cmp20_12(
   input   uint20 num,
   input   uint20 den,
   output! uint1 beq)
<autorun>   
{
  uint21 nk = 0;
  always {
    nk  = (num >> 12);
    beq = (nk > den);
  }
}
algorithm mul_cmp20_13(
   input   uint20 num,
   input   uint20 den,
   output! uint1 beq)
<autorun>   
{
  uint21 nk = 0;
  always {
    nk  = (num >> 13);
    beq = (nk > den);
  }
}
algorithm mul_cmp20_14(
   input   uint20 num,
   input   uint20 den,
   output! uint1 beq)
<autorun>   
{
  uint21 nk = 0;
  always {
    nk  = (num >> 14);
    beq = (nk > den);
  }
}
algorithm mul_cmp20_15(
   input   uint20 num,
   input   uint20 den,
   output! uint1 beq)
<autorun>   
{
  uint21 nk = 0;
  always {
    nk  = (num >> 15);
    beq = (nk > den);
  }
}
algorithm mul_cmp20_16(
   input   uint20 num,
   input   uint20 den,
   output! uint1 beq)
<autorun>   
{
  uint21 nk = 0;
  always {
    nk  = (num >> 16);
    beq = (nk > den);
  }
}
algorithm mul_cmp20_17(
   input   uint20 num,
   input   uint20 den,
   output! uint1 beq)
<autorun>   
{
  uint21 nk = 0;
  always {
    nk  = (num >> 17);
    beq = (nk > den);
  }
}
algorithm mul_cmp20_18(
   input   uint20 num,
   input   uint20 den,
   output! uint1 beq)
<autorun>   
{
  uint21 nk = 0;
  always {
    nk  = (num >> 18);
    beq = (nk > den);
  }
}

// division algorithm
algorithm div20(
  input  int20 inum,
  input  int20 iden,
  output int20 ret)
{
  uint1 r0 = 0;
  uint1 r1 = 0;
  uint1 r2 = 0;
  uint1 r3 = 0;
  uint1 r4 = 0;
  uint1 r5 = 0;
  uint1 r6 = 0;
  uint1 r7 = 0;
  uint1 r8 = 0;
  uint1 r9 = 0;
  uint1 r10 = 0;
  uint1 r11 = 0;
  uint1 r12 = 0;
  uint1 r13 = 0;
  uint1 r14 = 0;
  uint1 r15 = 0;
  uint1 r16 = 0;
  uint1 r17 = 0;
  uint1 r18 = 0;

  uint20 reminder = 0;

  uint1 num_neg = 0;
  uint1 den_neg = 0;
  
  uint20 num = 0;
  uint20 den = 0; 

  uint20 concat = 0;

  // instantiate comparators
  mul_cmp20_0 mc0(num <:: reminder, den <:: den, beq :> r0);
  mul_cmp20_1 mc1(num <:: reminder, den <:: den, beq :> r1);
  mul_cmp20_2 mc2(num <:: reminder, den <:: den, beq :> r2);
  mul_cmp20_3 mc3(num <:: reminder, den <:: den, beq :> r3);
  mul_cmp20_4 mc4(num <:: reminder, den <:: den, beq :> r4);
  mul_cmp20_5 mc5(num <:: reminder, den <:: den, beq :> r5);
  mul_cmp20_6 mc6(num <:: reminder, den <:: den, beq :> r6);
  mul_cmp20_7 mc7(num <:: reminder, den <:: den, beq :> r7);
  mul_cmp20_8 mc8(num <:: reminder, den <:: den, beq :> r8);
  mul_cmp20_9 mc9(num <:: reminder, den <:: den, beq :> r9);
  mul_cmp20_10 mc10(num <:: reminder, den <:: den, beq :> r10);
  mul_cmp20_11 mc11(num <:: reminder, den <:: den, beq :> r11);
  mul_cmp20_12 mc12(num <:: reminder, den <:: den, beq :> r12);
  mul_cmp20_13 mc13(num <:: reminder, den <:: den, beq :> r13);
  mul_cmp20_14 mc14(num <:: reminder, den <:: den, beq :> r14);
  mul_cmp20_15 mc15(num <:: reminder, den <:: den, beq :> r15);
  mul_cmp20_16 mc16(num <:: reminder, den <:: den, beq :> r16);
  mul_cmp20_17 mc17(num <:: reminder, den <:: den, beq :> r17);
  mul_cmp20_18 mc18(num <:: reminder, den <:: den, beq :> r18);

  // deal with sign (den)
  den = iden;

  // deal with sign (num)
  num = inum;


  // early exit on trivial cases
  if (den > num) {
    ret = 0;
    goto done;
  }
  if (den == num) {
    ret = 1;
    goto done;
  }
  if (den == 0) {
    // div by zero, returns largest positive/negative
    if (num_neg ^ den_neg) {
      ret = 20b11111111111111111111;
    } else {
      ret = 20b01111111111111111111;
    }
    goto done;
  }

  reminder = num;
  ret      = 0;

  while (reminder >= den) {
  
    // perform assignment based on occurring case
    
    // produce a vector from the comparators
    // it has a one-hot pattern like 0...010...0
    concat = {!r18&&r17,!r17&&r16,!r16&&r15,!r15&&r14,!r14&&r13,!r13&&r12,!r12&&r11,!r11&&r10,!r10&&r9,!r9&&r8,!r8&&r7,!r7&&r6,!r6&&r5,!r5&&r4,!r4&&r3,!r3&&r2,!r2&&r1,!r1&&r0,1b0};
    // switch base on this number (NOTE: could be a onehot switch)
    switch(concat) {
      case 20b10000000000000000000: {
        ret      = ret      + (1<<18);
        reminder = reminder - (den << 18);
      }
      case 20b01000000000000000000: {
        ret      = ret      + (1<<17);
        reminder = reminder - (den << 17);
      }
      case 20b00100000000000000000: {
        ret      = ret      + (1<<16);
        reminder = reminder - (den << 16);
      }
      case 20b00010000000000000000: {
        ret      = ret      + (1<<15);
        reminder = reminder - (den << 15);
      }
      case 20b00001000000000000000: {
        ret      = ret      + (1<<14);
        reminder = reminder - (den << 14);
      }
      case 20b00000100000000000000: {
        ret      = ret      + (1<<13);
        reminder = reminder - (den << 13);
      }
      case 20b00000010000000000000: {
        ret      = ret      + (1<<12);
        reminder = reminder - (den << 12);
      }
      case 20b00000001000000000000: {
        ret      = ret      + (1<<11);
        reminder = reminder - (den << 11);
      }
      case 20b00000000100000000000: {
        ret      = ret      + (1<<10);
        reminder = reminder - (den << 10);
      }
      case 20b00000000010000000000: {
        ret      = ret      + (1<<9);
        reminder = reminder - (den << 9);
      }
      case 20b00000000001000000000: {
        ret      = ret      + (1<<8);
        reminder = reminder - (den << 8);
      }
      case 20b00000000000100000000: {
        ret      = ret      + (1<<7);
        reminder = reminder - (den << 7);
      }
      case 20b00000000000010000000: {
        ret      = ret      + (1<<6);
        reminder = reminder - (den << 6);
      }
      case 20b00000000000001000000: {
        ret      = ret      + (1<<5);
        reminder = reminder - (den << 5);
      }
      case 20b00000000000000100000: {
        ret      = ret      + (1<<4);
        reminder = reminder - (den << 4);
      }
      case 20b00000000000000010000: {
        ret      = ret      + (1<<3);
        reminder = reminder - (den << 3);
      }
      case 20b00000000000000001000: {
        ret      = ret      + (1<<2);
        reminder = reminder - (den << 2);
      }
      case 20b00000000000000000100: {
        ret      = ret      + (1<<1);
        reminder = reminder - (den << 1);
      }
      case 20b00000000000000000010: {
        ret      = ret      + (1<<0);
        reminder = reminder - (den << 0);
      }
// last case where 'concat' becomes all 0s
      case 20b00000000000000000000: {
        ret      = ret      + (1<<0);
        reminder = reminder - (den << 0);
      }
      default: {
        // should never happen
      }
    }
  }

done:


}


  
// -------------------------

bitfield DrawColumn
{
  uint9  height,
  uint1  v_or_h,
  uint2  material,
  uint6  texcoord
}

// -------------------------

algorithm columns_drawer(
  // sdram
  sdram_user    sd,
  // reading from column bram
  output uint9  addr,
  input  uint18 rdata, // NOTE, TODO: allow to use bitfield name (DrawColumn)
  // how many columns have been written
  input  uint9  num_in_cols,
  // how many collumns have been drawn
  output uint9  num_drawn_cols,
  // vsynch  
  input  uint1  vsync,  // vsynch
  // framebuffer selection
  input  uint1  fbuffer
) <autorun> { 

  uint9 y      = 0;
  uint9 yw     = 0;
  uint9 h      = 0;
  uint8 palidx = 0;
  
  uint20 v_tex       = 0;
  uint20 v_tex_incr  = 0;

  // texture data
  brom uint8 texture[] = {
};

  // table for vertical interpolation
  brom int20 hscr_inv[512]={
    1, // 0: unused
    262144,
    131072,
    87381,
    65536,
    52429,
    43691,
    37449,
    32768,
    29127,
    26214,
    23831,
    21845,
    20165,
    18725,
    17476,
    16384,
    15420,
    14564,
    13797,
    13107,
    12483,
    11916,
    11398,
    10923,
    10486,
    10082,
    9709,
    9362,
    9039,
    8738,
    8456,
    8192,
    7944,
    7710,
    7490,
    7282,
    7085,
    6899,
    6722,
    6554,
    6394,
    6242,
    6096,
    5958,
    5825,
    5699,
    5578,
    5461,
    5350,
    5243,
    5140,
    5041,
    4946,
    4855,
    4766,
    4681,
    4599,
    4520,
    4443,
    4369,
    4297,
    4228,
    4161,
    4096,
    4033,
    3972,
    3913,
    3855,
    3799,
    3745,
    3692,
    3641,
    3591,
    3542,
    3495,
    3449,
    3404,
    3361,
    3318,
    3277,
    3236,
    3197,
    3158,
    3121,
    3084,
    3048,
    3013,
    2979,
    2945,
    2913,
    2881,
    2849,
    2819,
    2789,
    2759,
    2731,
    2703,
    2675,
    2648,
    2621,
    2595,
    2570,
    2545,
    2521,
    2497,
    2473,
    2450,
    2427,
    2405,
    2383,
    2362,
    2341,
    2320,
    2300,
    2280,
    2260,
    2241,
    2222,
    2203,
    2185,
    2166,
    2149,
    2131,
    2114,
    2097,
    2081,
    2064,
    2048,
    2032,
    2016,
    2001,
    1986,
    1971,
    1956,
    1942,
    1928,
    1913,
    1900,
    1886,
    1872,
    1859,
    1846,
    1833,
    1820,
    1808,
    1796,
    1783,
    1771,
    1759,
    1748,
    1736,
    1725,
    1713,
    1702,
    1691,
    1680,
    1670,
    1659,
    1649,
    1638,
    1628,
    1618,
    1608,
    1598,
    1589,
    1579,
    1570,
    1560,
    1551,
    1542,
    1533,
    1524,
    1515,
    1507,
    1498,
    1489,
    1481,
    1473,
    1464,
    1456,
    1448,
    1440,
    1432,
    1425,
    1417,
    1409,
    1402,
    1394,
    1387,
    1380,
    1372,
    1365,
    1358,
    1351,
    1344,
    1337,
    1331,
    1324,
    1317,
    1311,
    1304,
    1298,
    1291,
    1285,
    1279,
    1273,
    1266,
    1260,
    1254,
    1248,
    1242,
    1237,
    1231,
    1225,
    1219,
    1214,
    1208,
    1202,
    1197,
    1192,
    1186,
    1181,
    1176,
    1170,
    1165,
    1160,
    1155,
    1150,
    1145,
    1140,
    1135,
    1130,
    1125,
    1120,
    1116,
    1111,
    1106,
    1101,
    1097,
    1092,
    1088,
    1083,
    1079,
    1074,
    1070,
    1066,
    1061,
    1057,
    1053,
    1049,
    1044,
    1040,
    1036,
    1032,
    1028,
    1024,
    1020,
    1016,
    1012,
    1008,
    1004,
    1001,
    997,
    993,
    989,
    986,
    982,
    978,
    975,
    971,
    967,
    964,
    960,
    957,
    953,
    950,
    946,
    943,
    940,
    936,
    933,
    930,
    926,
    923,
    920,
    917,
    913,
    910,
    907,
    904,
    901,
    898,
    895,
    892,
    889,
    886,
    883,
    880,
    877,
    874,
    871,
    868,
    865,
    862,
    859,
    857,
    854,
    851,
    848,
    846,
    843,
    840,
    838,
    835,
    832,
    830,
    827,
    824,
    822,
    819,
    817,
    814,
    812,
    809,
    807,
    804,
    802,
    799,
    797,
    794,
    792,
    790,
    787,
    785,
    783,
    780,
    778,
    776,
    773,
    771,
    769,
    767,
    764,
    762,
    760,
    758,
    755,
    753,
    751,
    749,
    747,
    745,
    743,
    741,
    738,
    736,
    734,
    732,
    730,
    728,
    726,
    724,
    722,
    720,
    718,
    716,
    714,
    712,
    710,
    708,
    707,
    705,
    703,
    701,
    699,
    697,
    695,
    694,
    692,
    690,
    688,
    686,
    684,
    683,
    681,
    679,
    677,
    676,
    674,
    672,
    670,
    669,
    667,
    665,
    664,
    662,
    660,
    659,
    657,
    655,
    654,
    652,
    650,
    649,
    647,
    646,
    644,
    643,
    641,
    639,
    638,
    636,
    635,
    633,
    632,
    630,
    629,
    627,
    626,
    624,
    623,
    621,
    620,
    618,
    617,
    615,
    614,
    612,
    611,
    610,
    608,
    607,
    605,
    604,
    603,
    601,
    600,
    599,
    597,
    596,
    594,
    593,
    592,
    590,
    589,
    588,
    586,
    585,
    584,
    583,
    581,
    580,
    579,
    577,
    576,
    575,
    574,
    572,
    571,
    570,
    569,
    567,
    566,
    565,
    564,
    563,
    561,
    560,
    559,
    558,
    557,
    555,
    554,
    553,
    552,
    551,
    550,
    548,
    547,
    546,
    545,
    544,
    543,
    542,
    541,
    539,
    538,
    537,
    536,
    535,
    534,
    533,
    532,
    531,
    530,
    529,
    527,
    526,
    525,
    524,
    523,
    522,
    521,
    520,
    519,
    518,
    517,
    516,
    515,
    514,
    513,
  };

  sd.in_valid := 0; // maintain low (pulses high when needed)  
  sd.rw       := 1; // writing to sdram

  while (1) {
  
    addr           = 0;
    num_drawn_cols = 0;
    while (num_drawn_cols < num_in_cols) {

      if (DrawColumn(rdata).height < 100) {
        h = DrawColumn(rdata).height;
      } else {
        h = 99;        
      }

      hscr_inv.addr = DrawColumn(rdata).height & 511;
      v_tex = 262144;
  ++:      
      v_tex_incr    = hscr_inv.rdata;

      y = 0;
      while (y < 100) {
        // floor and bottom half
        if (y <= h) {

          texture.addr = ((DrawColumn(rdata).texcoord
                       + ((DrawColumn(rdata).material)<<6)) & 255) + (((v_tex >> 13) & 63)<<8);
  ++:          
          if (DrawColumn(rdata).v_or_h == 1) {
            palidx       = texture.rdata;
          } else {
            palidx       = texture.rdata + 64;
          }

          //palidx = 63;          
        } else {
          palidx = 22;  
        }
        // write to sdram
        yw = 100+y;
        sd.data_in    = palidx;
        sd.addr       = {1b0,~fbuffer,24b0} | (num_drawn_cols) | (yw << 9); 
        sd.in_valid   = 1; // go ahead!
        while (!sd.done) { }
        // other half
        if (y <= h) {
        
          texture.addr = ((DrawColumn(rdata).texcoord
                       + (DrawColumn(rdata).material<<6)) & 255) + ((63 - ((v_tex >> 13) & 63))<<8);
  ++:          
          if (DrawColumn(rdata).v_or_h == 1) {
            palidx       = texture.rdata;
          } else {
            palidx       = texture.rdata + 64;
          }
        
          //palidx = 55;
        } else {
          palidx = 2;
        }
        
        // write to sdram
        yw = 100-y;
        sd.data_in    = palidx;
        sd.addr       = {1b0,~fbuffer,24b0} | (num_drawn_cols) | (yw << 9); 
        sd.in_valid   = 1; // go ahead!
        while (!sd.done) { }
        if (y <= h) {
          v_tex = v_tex + v_tex_incr;
        }
        y = y + 1;        
      }      
      
      // next
      num_drawn_cols = num_drawn_cols + 1;
      addr           = num_drawn_cols;
    }    
   
    // wait for frame to end
    while (vsync == 0) {}
    
  }
}

// -------------------------

algorithm frame_drawer(
  sdram_user    sd,
  input  uint1  sdram_clock,
  input  uint1  sdram_reset,
  input  uint1  vsync,
  output uint1  fbuffer,
  output uint8  leds
) <autorun> {

  uint1  vsync_filtered = 0;

  // NOTE, TODO: cannot yet declare the bram with the bitfield
  // bram DrawColumn columns[320] = {};
  simple_dualport_bram uint18 columns<@clock,@sdram_clock>[320] = uninitialized;

  // ray-cast columns counter  
  uint9 c       = 0;
  // drawn columns counter
  uint9 c_drawn = 0;

  columns_drawer coldrawer<@sdram_clock,!sdram_reset>
  (
    sd      <:> sd,
    vsync   <: vsync_filtered,
    fbuffer <: fbuffer,
    addr    :> columns.addr0,  // drives read (port0) of columns
    rdata   <: columns.rdata0,
    num_in_cols    <: c,
    num_drawn_cols :> c_drawn
  );

  
  // tangent table
  // this is carefully created so that
  // - both tan/cot match (v and 1/v) to avoid gaps at corners
  // - the asymptotic end do not reach excessively large values
  brom int30 tan_f[900] = { // 900 is 3600/4, a quarter of all angles
     0,
     7,
     14,
     21,
     29,
     36,
     43,
     50,
     57,
     64,
     71,
     79,
     86,
     93,
     100,
     107,
     114,
     122,
     129,
     136,
     143,
     150,
     157,
     165,
     172,
     179,
     186,
     193,
     200,
     207,
     215,
     222,
     229,
     236,
     243,
     251,
     258,
     265,
     272,
     279,
     286,
     294,
     301,
     308,
     315,
     322,
     330,
     337,
     344,
     351,
     358,
     366,
     373,
     380,
     387,
     394,
     402,
     409,
     416,
     423,
     431,
     438,
     445,
     452,
     459,
     467,
     474,
     481,
     488,
     496,
     503,
     510,
     517,
     525,
     532,
     539,
     547,
     554,
     561,
     568,
     576,
     583,
     590,
     598,
     605,
     612,
     619,
     627,
     634,
     641,
     649,
     656,
     663,
     671,
     678,
     685,
     693,
     700,
     708,
     715,
     722,
     730,
     737,
     744,
     752,
     759,
     767,
     774,
     781,
     789,
     796,
     804,
     811,
     818,
     826,
     833,
     841,
     848,
     856,
     863,
     871,
     878,
     886,
     893,
     901,
     908,
     916,
     923,
     931,
     938,
     946,
     953,
     961,
     968,
     976,
     983,
     991,
     998,
     1006,
     1014,
     1021,
     1029,
     1036,
     1044,
     1052,
     1059,
     1067,
     1075,
     1082,
     1090,
     1098,
     1105,
     1113,
     1121,
     1128,
     1136,
     1144,
     1151,
     1159,
     1167,
     1175,
     1182,
     1190,
     1198,
     1206,
     1213,
     1221,
     1229,
     1237,
     1244,
     1252,
     1260,
     1268,
     1276,
     1284,
     1291,
     1299,
     1307,
     1315,
     1323,
     1331,
     1339,
     1347,
     1355,
     1363,
     1371,
     1378,
     1386,
     1394,
     1402,
     1410,
     1418,
     1426,
     1434,
     1442,
     1450,
     1459,
     1467,
     1475,
     1483,
     1491,
     1499,
     1507,
     1515,
     1523,
     1531,
     1540,
     1548,
     1556,
     1564,
     1572,
     1581,
     1589,
     1597,
     1605,
     1613,
     1622,
     1630,
     1638,
     1647,
     1655,
     1663,
     1672,
     1680,
     1688,
     1697,
     1705,
     1713,
     1722,
     1730,
     1739,
     1747,
     1756,
     1764,
     1772,
     1781,
     1789,
     1798,
     1807,
     1815,
     1824,
     1832,
     1841,
     1849,
     1858,
     1867,
     1875,
     1884,
     1893,
     1901,
     1910,
     1919,
     1927,
     1936,
     1945,
     1954,
     1962,
     1971,
     1980,
     1989,
     1998,
     2007,
     2015,
     2024,
     2033,
     2042,
     2051,
     2060,
     2069,
     2078,
     2087,
     2096,
     2105,
     2114,
     2123,
     2132,
     2141,
     2150,
     2160,
     2169,
     2178,
     2187,
     2196,
     2205,
     2215,
     2224,
     2233,
     2242,
     2252,
     2261,
     2270,
     2280,
     2289,
     2299,
     2308,
     2317,
     2327,
     2336,
     2346,
     2355,
     2365,
     2374,
     2384,
     2394,
     2403,
     2413,
     2422,
     2432,
     2442,
     2451,
     2461,
     2471,
     2481,
     2490,
     2500,
     2510,
     2520,
     2530,
     2540,
     2550,
     2559,
     2569,
     2579,
     2589,
     2599,
     2609,
     2620,
     2630,
     2640,
     2650,
     2660,
     2670,
     2680,
     2691,
     2701,
     2711,
     2721,
     2732,
     2742,
     2752,
     2763,
     2773,
     2784,
     2794,
     2805,
     2815,
     2826,
     2836,
     2847,
     2857,
     2868,
     2879,
     2889,
     2900,
     2911,
     2922,
     2932,
     2943,
     2954,
     2965,
     2976,
     2987,
     2998,
     3009,
     3020,
     3031,
     3042,
     3053,
     3064,
     3075,
     3087,
     3098,
     3109,
     3120,
     3132,
     3143,
     3154,
     3166,
     3177,
     3189,
     3200,
     3212,
     3223,
     3235,
     3246,
     3258,
     3270,
     3282,
     3293,
     3305,
     3317,
     3329,
     3341,
     3353,
     3364,
     3376,
     3389,
     3401,
     3413,
     3425,
     3437,
     3449,
     3461,
     3474,
     3486,
     3498,
     3511,
     3523,
     3536,
     3548,
     3561,
     3573,
     3586,
     3598,
     3611,
     3624,
     3637,
     3649,
     3662,
     3675,
     3688,
     3701,
     3714,
     3727,
     3740,
     3753,
     3766,
     3780,
     3793,
     3806,
     3820,
     3833,
     3846,
     3860,
     3873,
     3887,
     3901,
     3914,
     3928,
     3942,
     3955,
     3969,
     3983,
     3997,
     4011,
     4025,
     4039,
     4053,
     4068,
     4082,
     4110,
     4124,
     4139,
     4153,
     4168,
     4182,
     4197,
     4212,
     4226,
     4241,
     4256,
     4271,
     4286,
     4301,
     4316,
     4331,
     4346,
     4361,
     4377,
     4392,
     4407,
     4423,
     4438,
     4454,
     4469,
     4485,
     4501,
     4517,
     4533,
     4549,
     4565,
     4581,
     4597,
     4613,
     4629,
     4646,
     4662,
     4678,
     4695,
     4711,
     4728,
     4745,
     4762,
     4778,
     4795,
     4812,
     4829,
     4846,
     4864,
     4881,
     4898,
     4916,
     4933,
     4951,
     4968,
     4986,
     5004,
     5022,
     5040,
     5058,
     5076,
     5094,
     5112,
     5130,
     5149,
     5167,
     5186,
     5205,
     5223,
     5242,
     5261,
     5280,
     5299,
     5318,
     5338,
     5357,
     5376,
     5396,
     5415,
     5435,
     5455,
     5475,
     5495,
     5515,
     5535,
     5555,
     5576,
     5596,
     5617,
     5637,
     5658,
     5679,
     5700,
     5721,
     5742,
     5763,
     5784,
     5806,
     5828,
     5849,
     5871,
     5893,
     5915,
     5937,
     5959,
     5982,
     6004,
     6027,
     6049,
     6072,
     6095,
     6118,
     6141,
     6164,
     6188,
     6211,
     6235,
     6259,
     6283,
     6307,
     6331,
     6355,
     6380,
     6404,
     6429,
     6454,
     6479,
     6504,
     6529,
     6554,
     6580,
     6606,
     6631,
     6657,
     6684,
     6710,
     6736,
     6763,
     6790,
     6816,
     6843,
     6871,
     6898,
     6925,
     6953,
     6981,
     7009,
     7037,
     7065,
     7094,
     7123,
     7152,
     7181,
     7210,
     7239,
     7269,
     7298,
     7328,
     7359,
     7389,
     7419,
     7450,
     7481,
     7512,
     7543,
     7575,
     7607,
     7639,
     7671,
     7703,
     7735,
     7768,
     7801,
     7834,
     7868,
     7901,
     7935,
     7969,
     8004,
     8038,
     8073,
     8108,
     8143,
     8179,
     8215,
     8251,
     8287,
     8324,
     8360,
     8398,
     8435,
     8472,
     8510,
     8549,
     8587,
     8626,
     8665,
     8704,
     8744,
     8783,
     8824,
     8864,
     8905,
     8946,
     8987,
     9029,
     9071,
     9114,
     9156,
     9199,
     9243,
     9286,
     9330,
     9375,
     9420,
     9465,
     9510,
     9556,
     9602,
     9649,
     9696,
     9743,
     9791,
     9840,
     9888,
     9937,
     9987,
     10036,
     10087,
     10137,
     10189,
     10240,
     10292,
     10345,
     10398,
     10451,
     10505,
     10560,
     10615,
     10670,
     10726,
     10782,
     10839,
     10897,
     10955,
     11013,
     11072,
     11132,
     11192,
     11253,
     11315,
     11377,
     11439,
     11502,
     11566,
     11631,
     11696,
     11762,
     11828,
     11895,
     11963,
     12031,
     12101,
     12171,
     12241,
     12313,
     12385,
     12458,
     12531,
     12606,
     12681,
     12757,
     12834,
     12912,
     12990,
     13070,
     13150,
     13232,
     13314,
     13397,
     13481,
     13566,
     13652,
     13739,
     13827,
     13917,
     14007,
     14098,
     14190,
     14284,
     14379,
     14474,
     14571,
     14670,
     14769,
     14870,
     14972,
     15075,
     15180,
     15286,
     15393,
     15502,
     15613,
     15724,
     15838,
     15952,
     16069,
     16187,
     16306,
     16428,
     16551,
     16675,
     16802,
     16930,
     17061,
     17193,
     17327,
     17463,
     17601,
     17741,
     17884,
     18028,
     18175,
     18324,
     18475,
     18629,
     18785,
     18944,
     19106,
     19270,
     19436,
     19606,
     19778,
     19954,
     20132,
     20313,
     20498,
     20686,
     20877,
     21072,
     21270,
     21471,
     21677,
     21886,
     22100,
     22317,
     22538,
     22764,
     22994,
     23229,
     23469,
     23713,
     23962,
     24217,
     24476,
     24741,
     25012,
     25289,
     25572,
     25861,
     26156,
     26458,
     26767,
     27083,
     27406,
     27738,
     28077,
     28424,
     28779,
     29144,
     29518,
     29901,
     30294,
     30698,
     31112,
     31537,
     31974,
     32423,
     32884,
     33359,
     33847,
     34350,
     34867,
     35400,
     35950,
     36516,
     37101,
     37704,
     38327,
     38970,
     39636,
     40324,
     41036,
     41774,
     42538,
     43331,
     44153,
     45007,
     45894,
     46817,
     47777,
     48777,
     49820,
     50908,
     52044,
     53232,
     54475,
     55776,
     57142,
     58575,
     60082,
     61668,
     63339,
     65104,
     66969,
     68943,
     71037,
     73262,
     75630,
     78156,
     80856,
     83748,
     86855,
     90200,
     93813,
     97727,
     101981,
     106621,
     111704,
     117294,
     123472,
     130336,
     138008,
     146639,
     156419,
     167597,
     180494,
     195540,
     213322,
     234659,
     260738,
     293335,
     335245,
     391124,
     469355,
     586699,
     782271,
     1173412,
  1173412,
  1173412,
  };
  
  brom int30 sin_m[2048] = {
    0,
    12,
    25,
    37,
    50,
    62,
    75,
    87,
    100,
    113,
    125,
    138,
    150,
    163,
    175,
    188,
    200,
    213,
    226,
    238,
    251,
    263,
    276,
    288,
    301,
    313,
    326,
    338,
    351,
    363,
    376,
    388,
    401,
    413,
    426,
    438,
    451,
    463,
    476,
    488,
    501,
    513,
    526,
    538,
    551,
    563,
    576,
    588,
    601,
    613,
    625,
    638,
    650,
    663,
    675,
    687,
    700,
    712,
    725,
    737,
    749,
    762,
    774,
    786,
    799,
    811,
    823,
    836,
    848,
    860,
    872,
    885,
    897,
    909,
    921,
    934,
    946,
    958,
    970,
    983,
    995,
    1007,
    1019,
    1031,
    1043,
    1056,
    1068,
    1080,
    1092,
    1104,
    1116,
    1128,
    1140,
    1152,
    1164,
    1176,
    1189,
    1201,
    1213,
    1225,
    1237,
    1248,
    1260,
    1272,
    1284,
    1296,
    1308,
    1320,
    1332,
    1344,
    1356,
    1368,
    1379,
    1391,
    1403,
    1415,
    1427,
    1438,
    1450,
    1462,
    1474,
    1485,
    1497,
    1509,
    1520,
    1532,
    1544,
    1555,
    1567,
    1579,
    1590,
    1602,
    1613,
    1625,
    1636,
    1648,
    1659,
    1671,
    1682,
    1694,
    1705,
    1717,
    1728,
    1739,
    1751,
    1762,
    1773,
    1785,
    1796,
    1807,
    1819,
    1830,
    1841,
    1852,
    1864,
    1875,
    1886,
    1897,
    1908,
    1919,
    1930,
    1941,
    1952,
    1964,
    1975,
    1986,
    1997,
    2007,
    2018,
    2029,
    2040,
    2051,
    2062,
    2073,
    2084,
    2094,
    2105,
    2116,
    2127,
    2138,
    2148,
    2159,
    2170,
    2180,
    2191,
    2201,
    2212,
    2223,
    2233,
    2244,
    2254,
    2265,
    2275,
    2286,
    2296,
    2306,
    2317,
    2327,
    2337,
    2348,
    2358,
    2368,
    2379,
    2389,
    2399,
    2409,
    2419,
    2429,
    2439,
    2450,
    2460,
    2470,
    2480,
    2490,
    2500,
    2510,
    2519,
    2529,
    2539,
    2549,
    2559,
    2569,
    2578,
    2588,
    2598,
    2608,
    2617,
    2627,
    2637,
    2646,
    2656,
    2665,
    2675,
    2684,
    2694,
    2703,
    2713,
    2722,
    2732,
    2741,
    2750,
    2760,
    2769,
    2778,
    2787,
    2796,
    2806,
    2815,
    2824,
    2833,
    2842,
    2851,
    2860,
    2869,
    2878,
    2887,
    2896,
    2905,
    2914,
    2922,
    2931,
    2940,
    2949,
    2957,
    2966,
    2975,
    2983,
    2992,
    3000,
    3009,
    3018,
    3026,
    3034,
    3043,
    3051,
    3060,
    3068,
    3076,
    3085,
    3093,
    3101,
    3109,
    3117,
    3126,
    3134,
    3142,
    3150,
    3158,
    3166,
    3174,
    3182,
    3190,
    3197,
    3205,
    3213,
    3221,
    3229,
    3236,
    3244,
    3252,
    3259,
    3267,
    3274,
    3282,
    3289,
    3297,
    3304,
    3312,
    3319,
    3326,
    3334,
    3341,
    3348,
    3356,
    3363,
    3370,
    3377,
    3384,
    3391,
    3398,
    3405,
    3412,
    3419,
    3426,
    3433,
    3440,
    3447,
    3453,
    3460,
    3467,
    3473,
    3480,
    3487,
    3493,
    3500,
    3506,
    3513,
    3519,
    3526,
    3532,
    3538,
    3545,
    3551,
    3557,
    3563,
    3570,
    3576,
    3582,
    3588,
    3594,
    3600,
    3606,
    3612,
    3618,
    3624,
    3629,
    3635,
    3641,
    3647,
    3652,
    3658,
    3664,
    3669,
    3675,
    3680,
    3686,
    3691,
    3697,
    3702,
    3708,
    3713,
    3718,
    3723,
    3729,
    3734,
    3739,
    3744,
    3749,
    3754,
    3759,
    3764,
    3769,
    3774,
    3779,
    3784,
    3789,
    3793,
    3798,
    3803,
    3807,
    3812,
    3816,
    3821,
    3826,
    3830,
    3834,
    3839,
    3843,
    3848,
    3852,
    3856,
    3860,
    3864,
    3869,
    3873,
    3877,
    3881,
    3885,
    3889,
    3893,
    3897,
    3900,
    3904,
    3908,
    3912,
    3915,
    3919,
    3923,
    3926,
    3930,
    3933,
    3937,
    3940,
    3944,
    3947,
    3950,
    3954,
    3957,
    3960,
    3963,
    3967,
    3970,
    3973,
    3976,
    3979,
    3982,
    3985,
    3988,
    3990,
    3993,
    3996,
    3999,
    4001,
    4004,
    4007,
    4009,
    4012,
    4014,
    4017,
    4019,
    4022,
    4024,
    4026,
    4029,
    4031,
    4033,
    4035,
    4037,
    4039,
    4041,
    4043,
    4045,
    4047,
    4049,
    4051,
    4053,
    4055,
    4057,
    4058,
    4060,
    4062,
    4063,
    4065,
    4066,
    4068,
    4069,
    4071,
    4072,
    4073,
    4075,
    4076,
    4077,
    4078,
    4079,
    4080,
    4081,
    4082,
    4083,
    4084,
    4085,
    4086,
    4087,
    4088,
    4089,
    4089,
    4090,
    4091,
    4091,
    4092,
    4092,
    4093,
    4093,
    4094,
    4094,
    4094,
    4095,
    4095,
    4095,
    4095,
    4095,
    4095,
    4095,
    4096,
    4095,
    4095,
    4095,
    4095,
    4095,
    4095,
    4095,
    4094,
    4094,
    4094,
    4093,
    4093,
    4092,
    4092,
    4091,
    4091,
    4090,
    4089,
    4089,
    4088,
    4087,
    4086,
    4085,
    4084,
    4083,
    4082,
    4081,
    4080,
    4079,
    4078,
    4077,
    4076,
    4075,
    4073,
    4072,
    4071,
    4069,
    4068,
    4066,
    4065,
    4063,
    4062,
    4060,
    4058,
    4057,
    4055,
    4053,
    4051,
    4049,
    4047,
    4045,
    4043,
    4041,
    4039,
    4037,
    4035,
    4033,
    4031,
    4029,
    4026,
    4024,
    4022,
    4019,
    4017,
    4014,
    4012,
    4009,
    4007,
    4004,
    4001,
    3999,
    3996,
    3993,
    3990,
    3988,
    3985,
    3982,
    3979,
    3976,
    3973,
    3970,
    3967,
    3963,
    3960,
    3957,
    3954,
    3950,
    3947,
    3944,
    3940,
    3937,
    3933,
    3930,
    3926,
    3923,
    3919,
    3915,
    3912,
    3908,
    3904,
    3900,
    3897,
    3893,
    3889,
    3885,
    3881,
    3877,
    3873,
    3869,
    3864,
    3860,
    3856,
    3852,
    3848,
    3843,
    3839,
    3834,
    3830,
    3826,
    3821,
    3816,
    3812,
    3807,
    3803,
    3798,
    3793,
    3789,
    3784,
    3779,
    3774,
    3769,
    3764,
    3759,
    3754,
    3749,
    3744,
    3739,
    3734,
    3729,
    3723,
    3718,
    3713,
    3708,
    3702,
    3697,
    3691,
    3686,
    3680,
    3675,
    3669,
    3664,
    3658,
    3652,
    3647,
    3641,
    3635,
    3629,
    3624,
    3618,
    3612,
    3606,
    3600,
    3594,
    3588,
    3582,
    3576,
    3570,
    3563,
    3557,
    3551,
    3545,
    3538,
    3532,
    3526,
    3519,
    3513,
    3506,
    3500,
    3493,
    3487,
    3480,
    3473,
    3467,
    3460,
    3453,
    3447,
    3440,
    3433,
    3426,
    3419,
    3412,
    3405,
    3398,
    3391,
    3384,
    3377,
    3370,
    3363,
    3356,
    3348,
    3341,
    3334,
    3326,
    3319,
    3312,
    3304,
    3297,
    3289,
    3282,
    3274,
    3267,
    3259,
    3252,
    3244,
    3236,
    3229,
    3221,
    3213,
    3205,
    3197,
    3190,
    3182,
    3174,
    3166,
    3158,
    3150,
    3142,
    3134,
    3126,
    3117,
    3109,
    3101,
    3093,
    3085,
    3076,
    3068,
    3060,
    3051,
    3043,
    3034,
    3026,
    3018,
    3009,
    3000,
    2992,
    2983,
    2975,
    2966,
    2957,
    2949,
    2940,
    2931,
    2922,
    2914,
    2905,
    2896,
    2887,
    2878,
    2869,
    2860,
    2851,
    2842,
    2833,
    2824,
    2815,
    2806,
    2796,
    2787,
    2778,
    2769,
    2760,
    2750,
    2741,
    2732,
    2722,
    2713,
    2703,
    2694,
    2684,
    2675,
    2665,
    2656,
    2646,
    2637,
    2627,
    2617,
    2608,
    2598,
    2588,
    2578,
    2569,
    2559,
    2549,
    2539,
    2529,
    2519,
    2510,
    2500,
    2490,
    2480,
    2470,
    2460,
    2450,
    2439,
    2429,
    2419,
    2409,
    2399,
    2389,
    2379,
    2368,
    2358,
    2348,
    2337,
    2327,
    2317,
    2306,
    2296,
    2286,
    2275,
    2265,
    2254,
    2244,
    2233,
    2223,
    2212,
    2201,
    2191,
    2180,
    2170,
    2159,
    2148,
    2138,
    2127,
    2116,
    2105,
    2094,
    2084,
    2073,
    2062,
    2051,
    2040,
    2029,
    2018,
    2007,
    1997,
    1986,
    1975,
    1964,
    1952,
    1941,
    1930,
    1919,
    1908,
    1897,
    1886,
    1875,
    1864,
    1852,
    1841,
    1830,
    1819,
    1807,
    1796,
    1785,
    1773,
    1762,
    1751,
    1739,
    1728,
    1717,
    1705,
    1694,
    1682,
    1671,
    1659,
    1648,
    1636,
    1625,
    1613,
    1602,
    1590,
    1579,
    1567,
    1555,
    1544,
    1532,
    1520,
    1509,
    1497,
    1485,
    1474,
    1462,
    1450,
    1438,
    1427,
    1415,
    1403,
    1391,
    1379,
    1368,
    1356,
    1344,
    1332,
    1320,
    1308,
    1296,
    1284,
    1272,
    1260,
    1248,
    1237,
    1225,
    1213,
    1201,
    1189,
    1176,
    1164,
    1152,
    1140,
    1128,
    1116,
    1104,
    1092,
    1080,
    1068,
    1056,
    1043,
    1031,
    1019,
    1007,
    995,
    983,
    970,
    958,
    946,
    934,
    921,
    909,
    897,
    885,
    872,
    860,
    848,
    836,
    823,
    811,
    799,
    786,
    774,
    762,
    749,
    737,
    725,
    712,
    700,
    687,
    675,
    663,
    650,
    638,
    625,
    613,
    601,
    588,
    576,
    563,
    551,
    538,
    526,
    513,
    501,
    488,
    476,
    463,
    451,
    438,
    426,
    413,
    401,
    388,
    376,
    363,
    351,
    338,
    326,
    313,
    301,
    288,
    276,
    263,
    251,
    238,
    226,
    213,
    200,
    188,
    175,
    163,
    150,
    138,
    125,
    113,
    100,
    87,
    75,
    62,
    50,
    37,
    25,
    12,
    0,
    -13,
    -26,
    -38,
    -51,
    -63,
    -76,
    -88,
    -101,
    -114,
    -126,
    -139,
    -151,
    -164,
    -176,
    -189,
    -201,
    -214,
    -227,
    -239,
    -252,
    -264,
    -277,
    -289,
    -302,
    -314,
    -327,
    -339,
    -352,
    -364,
    -377,
    -389,
    -402,
    -414,
    -427,
    -439,
    -452,
    -464,
    -477,
    -489,
    -502,
    -514,
    -527,
    -539,
    -552,
    -564,
    -577,
    -589,
    -602,
    -614,
    -626,
    -639,
    -651,
    -664,
    -676,
    -688,
    -701,
    -713,
    -726,
    -738,
    -750,
    -763,
    -775,
    -787,
    -800,
    -812,
    -824,
    -837,
    -849,
    -861,
    -873,
    -886,
    -898,
    -910,
    -922,
    -935,
    -947,
    -959,
    -971,
    -984,
    -996,
    -1008,
    -1020,
    -1032,
    -1044,
    -1057,
    -1069,
    -1081,
    -1093,
    -1105,
    -1117,
    -1129,
    -1141,
    -1153,
    -1165,
    -1177,
    -1190,
    -1202,
    -1214,
    -1226,
    -1238,
    -1249,
    -1261,
    -1273,
    -1285,
    -1297,
    -1309,
    -1321,
    -1333,
    -1345,
    -1357,
    -1369,
    -1380,
    -1392,
    -1404,
    -1416,
    -1428,
    -1439,
    -1451,
    -1463,
    -1475,
    -1486,
    -1498,
    -1510,
    -1521,
    -1533,
    -1545,
    -1556,
    -1568,
    -1580,
    -1591,
    -1603,
    -1614,
    -1626,
    -1637,
    -1649,
    -1660,
    -1672,
    -1683,
    -1695,
    -1706,
    -1718,
    -1729,
    -1740,
    -1752,
    -1763,
    -1774,
    -1786,
    -1797,
    -1808,
    -1820,
    -1831,
    -1842,
    -1853,
    -1865,
    -1876,
    -1887,
    -1898,
    -1909,
    -1920,
    -1931,
    -1942,
    -1953,
    -1965,
    -1976,
    -1987,
    -1998,
    -2008,
    -2019,
    -2030,
    -2041,
    -2052,
    -2063,
    -2074,
    -2085,
    -2095,
    -2106,
    -2117,
    -2128,
    -2139,
    -2149,
    -2160,
    -2171,
    -2181,
    -2192,
    -2202,
    -2213,
    -2224,
    -2234,
    -2245,
    -2255,
    -2266,
    -2276,
    -2287,
    -2297,
    -2307,
    -2318,
    -2328,
    -2338,
    -2349,
    -2359,
    -2369,
    -2380,
    -2390,
    -2400,
    -2410,
    -2420,
    -2430,
    -2440,
    -2451,
    -2461,
    -2471,
    -2481,
    -2491,
    -2501,
    -2511,
    -2520,
    -2530,
    -2540,
    -2550,
    -2560,
    -2570,
    -2579,
    -2589,
    -2599,
    -2609,
    -2618,
    -2628,
    -2638,
    -2647,
    -2657,
    -2666,
    -2676,
    -2685,
    -2695,
    -2704,
    -2714,
    -2723,
    -2733,
    -2742,
    -2751,
    -2761,
    -2770,
    -2779,
    -2788,
    -2797,
    -2807,
    -2816,
    -2825,
    -2834,
    -2843,
    -2852,
    -2861,
    -2870,
    -2879,
    -2888,
    -2897,
    -2906,
    -2915,
    -2923,
    -2932,
    -2941,
    -2950,
    -2958,
    -2967,
    -2976,
    -2984,
    -2993,
    -3001,
    -3010,
    -3019,
    -3027,
    -3035,
    -3044,
    -3052,
    -3061,
    -3069,
    -3077,
    -3086,
    -3094,
    -3102,
    -3110,
    -3118,
    -3127,
    -3135,
    -3143,
    -3151,
    -3159,
    -3167,
    -3175,
    -3183,
    -3191,
    -3198,
    -3206,
    -3214,
    -3222,
    -3230,
    -3237,
    -3245,
    -3253,
    -3260,
    -3268,
    -3275,
    -3283,
    -3290,
    -3298,
    -3305,
    -3313,
    -3320,
    -3327,
    -3335,
    -3342,
    -3349,
    -3357,
    -3364,
    -3371,
    -3378,
    -3385,
    -3392,
    -3399,
    -3406,
    -3413,
    -3420,
    -3427,
    -3434,
    -3441,
    -3448,
    -3454,
    -3461,
    -3468,
    -3474,
    -3481,
    -3488,
    -3494,
    -3501,
    -3507,
    -3514,
    -3520,
    -3527,
    -3533,
    -3539,
    -3546,
    -3552,
    -3558,
    -3564,
    -3571,
    -3577,
    -3583,
    -3589,
    -3595,
    -3601,
    -3607,
    -3613,
    -3619,
    -3625,
    -3630,
    -3636,
    -3642,
    -3648,
    -3653,
    -3659,
    -3665,
    -3670,
    -3676,
    -3681,
    -3687,
    -3692,
    -3698,
    -3703,
    -3709,
    -3714,
    -3719,
    -3724,
    -3730,
    -3735,
    -3740,
    -3745,
    -3750,
    -3755,
    -3760,
    -3765,
    -3770,
    -3775,
    -3780,
    -3785,
    -3790,
    -3794,
    -3799,
    -3804,
    -3808,
    -3813,
    -3817,
    -3822,
    -3827,
    -3831,
    -3835,
    -3840,
    -3844,
    -3849,
    -3853,
    -3857,
    -3861,
    -3865,
    -3870,
    -3874,
    -3878,
    -3882,
    -3886,
    -3890,
    -3894,
    -3898,
    -3901,
    -3905,
    -3909,
    -3913,
    -3916,
    -3920,
    -3924,
    -3927,
    -3931,
    -3934,
    -3938,
    -3941,
    -3945,
    -3948,
    -3951,
    -3955,
    -3958,
    -3961,
    -3964,
    -3968,
    -3971,
    -3974,
    -3977,
    -3980,
    -3983,
    -3986,
    -3989,
    -3991,
    -3994,
    -3997,
    -4000,
    -4002,
    -4005,
    -4008,
    -4010,
    -4013,
    -4015,
    -4018,
    -4020,
    -4023,
    -4025,
    -4027,
    -4030,
    -4032,
    -4034,
    -4036,
    -4038,
    -4040,
    -4042,
    -4044,
    -4046,
    -4048,
    -4050,
    -4052,
    -4054,
    -4056,
    -4058,
    -4059,
    -4061,
    -4063,
    -4064,
    -4066,
    -4067,
    -4069,
    -4070,
    -4072,
    -4073,
    -4074,
    -4076,
    -4077,
    -4078,
    -4079,
    -4080,
    -4081,
    -4082,
    -4083,
    -4084,
    -4085,
    -4086,
    -4087,
    -4088,
    -4089,
    -4090,
    -4090,
    -4091,
    -4092,
    -4092,
    -4093,
    -4093,
    -4094,
    -4094,
    -4095,
    -4095,
    -4095,
    -4096,
    -4096,
    -4096,
    -4096,
    -4096,
    -4096,
    -4096,
    -4096,
    -4096,
    -4096,
    -4096,
    -4096,
    -4096,
    -4096,
    -4096,
    -4095,
    -4095,
    -4095,
    -4094,
    -4094,
    -4093,
    -4093,
    -4092,
    -4092,
    -4091,
    -4090,
    -4090,
    -4089,
    -4088,
    -4087,
    -4086,
    -4085,
    -4084,
    -4083,
    -4082,
    -4081,
    -4080,
    -4079,
    -4078,
    -4077,
    -4076,
    -4074,
    -4073,
    -4072,
    -4070,
    -4069,
    -4067,
    -4066,
    -4064,
    -4063,
    -4061,
    -4059,
    -4058,
    -4056,
    -4054,
    -4052,
    -4050,
    -4048,
    -4046,
    -4044,
    -4042,
    -4040,
    -4038,
    -4036,
    -4034,
    -4032,
    -4030,
    -4027,
    -4025,
    -4023,
    -4020,
    -4018,
    -4015,
    -4013,
    -4010,
    -4008,
    -4005,
    -4002,
    -4000,
    -3997,
    -3994,
    -3991,
    -3989,
    -3986,
    -3983,
    -3980,
    -3977,
    -3974,
    -3971,
    -3968,
    -3964,
    -3961,
    -3958,
    -3955,
    -3951,
    -3948,
    -3945,
    -3941,
    -3938,
    -3934,
    -3931,
    -3927,
    -3924,
    -3920,
    -3916,
    -3913,
    -3909,
    -3905,
    -3901,
    -3898,
    -3894,
    -3890,
    -3886,
    -3882,
    -3878,
    -3874,
    -3870,
    -3865,
    -3861,
    -3857,
    -3853,
    -3849,
    -3844,
    -3840,
    -3835,
    -3831,
    -3827,
    -3822,
    -3817,
    -3813,
    -3808,
    -3804,
    -3799,
    -3794,
    -3790,
    -3785,
    -3780,
    -3775,
    -3770,
    -3765,
    -3760,
    -3755,
    -3750,
    -3745,
    -3740,
    -3735,
    -3730,
    -3724,
    -3719,
    -3714,
    -3709,
    -3703,
    -3698,
    -3692,
    -3687,
    -3681,
    -3676,
    -3670,
    -3665,
    -3659,
    -3653,
    -3648,
    -3642,
    -3636,
    -3630,
    -3625,
    -3619,
    -3613,
    -3607,
    -3601,
    -3595,
    -3589,
    -3583,
    -3577,
    -3571,
    -3564,
    -3558,
    -3552,
    -3546,
    -3539,
    -3533,
    -3527,
    -3520,
    -3514,
    -3507,
    -3501,
    -3494,
    -3488,
    -3481,
    -3474,
    -3468,
    -3461,
    -3454,
    -3448,
    -3441,
    -3434,
    -3427,
    -3420,
    -3413,
    -3406,
    -3399,
    -3392,
    -3385,
    -3378,
    -3371,
    -3364,
    -3357,
    -3349,
    -3342,
    -3335,
    -3327,
    -3320,
    -3313,
    -3305,
    -3298,
    -3290,
    -3283,
    -3275,
    -3268,
    -3260,
    -3253,
    -3245,
    -3237,
    -3230,
    -3222,
    -3214,
    -3206,
    -3198,
    -3191,
    -3183,
    -3175,
    -3167,
    -3159,
    -3151,
    -3143,
    -3135,
    -3127,
    -3118,
    -3110,
    -3102,
    -3094,
    -3086,
    -3077,
    -3069,
    -3061,
    -3052,
    -3044,
    -3035,
    -3027,
    -3019,
    -3010,
    -3001,
    -2993,
    -2984,
    -2976,
    -2967,
    -2958,
    -2950,
    -2941,
    -2932,
    -2923,
    -2915,
    -2906,
    -2897,
    -2888,
    -2879,
    -2870,
    -2861,
    -2852,
    -2843,
    -2834,
    -2825,
    -2816,
    -2807,
    -2797,
    -2788,
    -2779,
    -2770,
    -2761,
    -2751,
    -2742,
    -2733,
    -2723,
    -2714,
    -2704,
    -2695,
    -2685,
    -2676,
    -2666,
    -2657,
    -2647,
    -2638,
    -2628,
    -2618,
    -2609,
    -2599,
    -2589,
    -2579,
    -2570,
    -2560,
    -2550,
    -2540,
    -2530,
    -2520,
    -2511,
    -2501,
    -2491,
    -2481,
    -2471,
    -2461,
    -2451,
    -2440,
    -2430,
    -2420,
    -2410,
    -2400,
    -2390,
    -2380,
    -2369,
    -2359,
    -2349,
    -2338,
    -2328,
    -2318,
    -2307,
    -2297,
    -2287,
    -2276,
    -2266,
    -2255,
    -2245,
    -2234,
    -2224,
    -2213,
    -2202,
    -2192,
    -2181,
    -2171,
    -2160,
    -2149,
    -2139,
    -2128,
    -2117,
    -2106,
    -2095,
    -2085,
    -2074,
    -2063,
    -2052,
    -2041,
    -2030,
    -2019,
    -2008,
    -1998,
    -1987,
    -1976,
    -1965,
    -1953,
    -1942,
    -1931,
    -1920,
    -1909,
    -1898,
    -1887,
    -1876,
    -1865,
    -1853,
    -1842,
    -1831,
    -1820,
    -1808,
    -1797,
    -1786,
    -1774,
    -1763,
    -1752,
    -1740,
    -1729,
    -1718,
    -1706,
    -1695,
    -1683,
    -1672,
    -1660,
    -1649,
    -1637,
    -1626,
    -1614,
    -1603,
    -1591,
    -1580,
    -1568,
    -1556,
    -1545,
    -1533,
    -1521,
    -1510,
    -1498,
    -1486,
    -1475,
    -1463,
    -1451,
    -1439,
    -1428,
    -1416,
    -1404,
    -1392,
    -1380,
    -1369,
    -1357,
    -1345,
    -1333,
    -1321,
    -1309,
    -1297,
    -1285,
    -1273,
    -1261,
    -1249,
    -1238,
    -1226,
    -1214,
    -1202,
    -1190,
    -1177,
    -1165,
    -1153,
    -1141,
    -1129,
    -1117,
    -1105,
    -1093,
    -1081,
    -1069,
    -1057,
    -1044,
    -1032,
    -1020,
    -1008,
    -996,
    -984,
    -971,
    -959,
    -947,
    -935,
    -922,
    -910,
    -898,
    -886,
    -873,
    -861,
    -849,
    -837,
    -824,
    -812,
    -800,
    -787,
    -775,
    -763,
    -750,
    -738,
    -726,
    -713,
    -701,
    -688,
    -676,
    -664,
    -651,
    -639,
    -626,
    -614,
    -602,
    -589,
    -577,
    -564,
    -552,
    -539,
    -527,
    -514,
    -502,
    -489,
    -477,
    -464,
    -452,
    -439,
    -427,
    -414,
    -402,
    -389,
    -377,
    -364,
    -352,
    -339,
    -327,
    -314,
    -302,
    -289,
    -277,
    -264,
    -252,
    -239,
    -227,
    -214,
    -201,
    -189,
    -176,
    -164,
    -151,
    -139,
    -126,
    -114,
    -101,
    -88,
    -76,
    -63,
    -51,
    -38,
    -26,
    -13,
  };

  // level definition
  brom uint3 level[256] = {
   1,1,1,1,1,1,4,1,4,1,1,2,1,1,1,1,
   1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,
   1,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,
   1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,
   1,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,
   1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
   1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
   1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
   1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,4,
   1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,4,
   1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
   1,0,0,0,0,0,1,0,0,2,0,0,1,0,0,4,
   1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
   1,0,0,0,1,0,1,0,1,0,1,0,1,0,0,4,
   1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
   1,1,1,1,1,1,4,1,4,1,4,1,1,1,1,1,
  };
    
  int30 posx_f  = 8192;
  int30 posy_f  = 8192;
  int16    posa    = 0;
  int30 hitx_f  = 0;
  int30 hity_f  = 0;
  int30 xstep_f = 0;
  int30 ystep_f = 0;

  int30 fracx_up_m = 0;
  int30 fracx_dw_m = 0;
  int30 fracy_up_m = 0;
  int30 fracy_dw_m = 0;
  int30 fracx_m    = 0;
  int30 fracy_m    = 0;

  int30 cosview_m  = 0;
  int30 sinview_m  = 0;

  int30 mapx     = 0;
  int30 mapy     = 0;
  int30 mapxstep = 0;
  int30 mapystep = 0;
  int30 mapxtest = 0;
  int30 mapytest = 0;
  
  int30 tmp1   = 0;
  int30 tmp2   = 0;
  int30 dist_f = 0;
  int30 height = 0;
  
  uint1  dir_y = 0;
  
  div20 div;
  
  uint3     hit         = 0;
  uint1     v_or_h      = 0;
  
  int16     viewangle   = 0;
  int16     colangle    = 0;
  
  vsync_filtered ::= vsync;

  leds := 0;

  fbuffer = 0;
  
  columns.wenable1 = 1; // write on port 0
  
  while (1) {
    
    viewangle = ((160 + posa) * 1165) >> 11;
    
    // get cos/sin view
    sin_m.addr = (viewangle) & 2047;
++:    
    sinview_m  = sin_m.rdata;
    sin_m.addr = (viewangle + 512) & 2047;
++:    
    cosview_m  = sin_m.rdata;

    // raycast columns
    c = 0;
    while (c < 320) {

      // start cell 
      mapx       = (posx_f >> 12);
      mapy       = (posy_f >> 12);
++:      
      // fracx_dw_m = (posx_f >> 0) & 4095;
      fracx_dw_m = (posx_f) & 4095;
      fracx_up_m = 4095 - fracx_dw_m;      
++:      
      // fracy_dw_m = (posy_f >> 0) & 4095;
      fracy_dw_m = (posy_f) & 4095;
      fracy_up_m = 4095 - fracy_dw_m;      
++:      
      
      colangle   = posa + c;
      while (colangle < __signed(0)) {
        colangle = colangle + 3600;
      }
      while (colangle > __signed(3600)) {
        colangle = colangle - 3600;
      }
      if (colangle < __signed(900)) {
        mapxstep   =  1;
        mapystep   = -1;
        fracx_m    = fracx_up_m;
        fracy_m    = fracy_dw_m;
        tan_f.addr = 899-colangle;
++:
        xstep_f    = tan_f.rdata;        
        tan_f.addr = colangle;
++:
        ystep_f    = - tan_f.rdata;        
      } else {
        if (colangle < 1800) {
          mapxstep   = -1;
          mapystep   = -1;
          fracx_m    = fracx_dw_m;
          fracy_m    = fracy_dw_m;
          tan_f.addr = colangle - 900;
++:
          xstep_f    = - tan_f.rdata;        
          tan_f.addr = 1799-colangle;
++:
          ystep_f    = - tan_f.rdata;        
        } else {
          if (colangle < 2700) {
            mapxstep   = -1;
            mapystep   =  1;
            fracx_m    = fracx_dw_m;
            fracy_m    = fracy_up_m;
            tan_f.addr = 2699-colangle;
++:
            xstep_f    = - tan_f.rdata;        
            tan_f.addr = colangle - 1800;
++:
            ystep_f    = tan_f.rdata;        
          } else {
            mapxstep   =  1;
            mapystep   =  1;
            fracx_m    = fracx_up_m;
            fracy_m    = fracy_up_m;
            tan_f.addr = colangle-2700;
++:
            xstep_f    = tan_f.rdata;        
            tan_f.addr = 3599-colangle;
++:
            ystep_f    = tan_f.rdata;            
          }        
        }   
      }
++:           
      // first intersection
      hity_f = posy_f + ((fracx_m * ystep_f) >>> 12);
      mapx   = mapx + mapxstep;
// ++:   // (relax timing)      
      hitx_f = posx_f + ((fracy_m * xstep_f) >>> 12);
      mapy   = mapy + mapystep;
++:
      // DDA wolfenstein-style main loop
      hit    = 0;
      v_or_h = 0; // 0: vertical (along x) 1: horizontal (along y)
      while (hit == 0) {
      
        mapxtest = hitx_f >>> 12;
        mapytest = hity_f >>> 12;
++:
        // shall we do vertical or horizontal?
        if (v_or_h == 0) {
          // keep doing vertical?
          if (mapystep > __signed(0) && mapytest >= mapy) {
            v_or_h = 1;
          } else {
          if (mapystep < __signed(0) && mapytest <= mapy) {
            v_or_h = 1;
          } }
        } else {
          // keep doing horizontal?
          if (mapxstep > __signed(0) && mapxtest >= mapx) {
            v_or_h = 0;
          } else {
          if (mapxstep < __signed(0) && mapxtest <= mapx) {
            v_or_h = 0;
          } } 
        }
++:
        // advance 
        if (v_or_h == 0) {
          // check for a hit on vertical edges
          level.addr = (mapx&15) + (((mapytest)&15)<<4);
          // hit = level[(mapx&15) + (((mapytest)&15)<<4)];
++:
          hit = level.rdata;
          if (hit != 0) {
            if (mapxstep < 0) {
              hitx_f = (mapx+1) << 12;
            } else {
              hitx_f = mapx << 12;
            }
          } else {
            mapx   = mapx   + mapxstep;
            hity_f = hity_f + ystep_f;
          }
        } else {
          // check for a hit on horizontal edges
          level.addr = ((mapxtest)&15) + ((mapy&15)<<4);
          // hit = level[((mapxtest)&15) + ((mapy&15)<<4)];
++:
          hit = level.rdata;
          if (hit != 0) {
            if (mapystep < 0) {
              hity_f = (mapy+1) << 12;
            } else {
              hity_f = mapy << 12;
            }
          } else {
            mapy   = mapy   + mapystep;
            hitx_f = hitx_f + xstep_f;
          }
        }
      }
      
++:
      // compute distance
      tmp1   = (cosview_m * (hitx_f - posx_f)) >>> 12;
// ++:   // relax timing      
      tmp2   = (sinview_m * (hity_f - posy_f)) >>> 12;
++:   // relax timing      
      dist_f = (tmp1 - tmp2);
++:   // relax timing      

      // projection divide      
      (height) <- div <- (573440,dist_f>>1);
    
      columns.addr1 = c;
      DrawColumn(columns.wdata1).height   = height;
      DrawColumn(columns.wdata1).v_or_h   = v_or_h;
      DrawColumn(columns.wdata1).material = hit-1;
      DrawColumn(columns.wdata1).texcoord = (v_or_h == 0) ? (hity_f >>> 6) : (hitx_f >>> 6);
      
      // write on loop     
      c = c + 1;
    }

    // wait for drawer to end
    while (c_drawn < 320) {}

    // wait for frame to end
    while (vsync_filtered == 0) {}

    if (dir_y == 0) {
      if (posy_f < 61440) {
        posy_f = posy_f + 70;
      } else { 
        dir_y = 1;
      }
    } else {
      if (posy_f > 8192) {
        posy_f = posy_f - 70;
      } else {
        dir_y = 0;
      }
    }

    // swap buffers
    fbuffer = ~fbuffer;

  }

}

// ------------------------- 

